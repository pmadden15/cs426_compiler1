/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  comp5210.analysis;

namespace comp5210.node {

public abstract class PProgram : Node
{
}

public abstract class PBody : Node
{
}

public abstract class PBodyLesser : Node
{
}

public abstract class PConstant : Node
{
}

public abstract class PVariableDeclaration : Node
{
}

public abstract class PAssignment : Node
{
}

public abstract class PIfStatement : Node
{
}

public abstract class PWhileStatement : Node
{
}

public abstract class PProcedureCall : Node
{
}

public abstract class PProcedureDeclaration : Node
{
}

public abstract class PProcedureHelper : Node
{
}

public abstract class PExpressionMain : Node
{
}

public abstract class PExpression : Node
{
}

public abstract class PExpression1 : Node
{
}

public abstract class PExpression2 : Node
{
}

public abstract class PExpression3 : Node
{
}

public abstract class PExpression4 : Node
{
}

public abstract class PExpression5 : Node
{
}


public sealed class AProgram : PProgram
{
    private TMainProgram _main_program_;
    private TLParenthesis _l_parenthesis_;
    private TRParenthesis _r_parenthesis_;
    private TLCuBracket _l_cu_bracket_;
    private PBody _body_;
    private TRCuBracket _r_cu_bracket_;

    public AProgram ()
    {
    }

    public AProgram (
            TMainProgram _main_program_,
            TLParenthesis _l_parenthesis_,
            TRParenthesis _r_parenthesis_,
            TLCuBracket _l_cu_bracket_,
            PBody _body_,
            TRCuBracket _r_cu_bracket_
    )
    {
        SetMainProgram (_main_program_);
        SetLParenthesis (_l_parenthesis_);
        SetRParenthesis (_r_parenthesis_);
        SetLCuBracket (_l_cu_bracket_);
        SetBody (_body_);
        SetRCuBracket (_r_cu_bracket_);
    }

    public override Object Clone()
    {
        return new AProgram (
            (TMainProgram)CloneNode (_main_program_),
            (TLParenthesis)CloneNode (_l_parenthesis_),
            (TRParenthesis)CloneNode (_r_parenthesis_),
            (TLCuBracket)CloneNode (_l_cu_bracket_),
            (PBody)CloneNode (_body_),
            (TRCuBracket)CloneNode (_r_cu_bracket_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProgram(this);
    }

    public TMainProgram GetMainProgram ()
    {
        return _main_program_;
    }

    public void SetMainProgram (TMainProgram node)
    {
        if(_main_program_ != null)
        {
            _main_program_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _main_program_ = node;
    }
    public TLParenthesis GetLParenthesis ()
    {
        return _l_parenthesis_;
    }

    public void SetLParenthesis (TLParenthesis node)
    {
        if(_l_parenthesis_ != null)
        {
            _l_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_parenthesis_ = node;
    }
    public TRParenthesis GetRParenthesis ()
    {
        return _r_parenthesis_;
    }

    public void SetRParenthesis (TRParenthesis node)
    {
        if(_r_parenthesis_ != null)
        {
            _r_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_parenthesis_ = node;
    }
    public TLCuBracket GetLCuBracket ()
    {
        return _l_cu_bracket_;
    }

    public void SetLCuBracket (TLCuBracket node)
    {
        if(_l_cu_bracket_ != null)
        {
            _l_cu_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_cu_bracket_ = node;
    }
    public PBody GetBody ()
    {
        return _body_;
    }

    public void SetBody (PBody node)
    {
        if(_body_ != null)
        {
            _body_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _body_ = node;
    }
    public TRCuBracket GetRCuBracket ()
    {
        return _r_cu_bracket_;
    }

    public void SetRCuBracket (TRCuBracket node)
    {
        if(_r_cu_bracket_ != null)
        {
            _r_cu_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_cu_bracket_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_main_program_)
            + ToString (_l_parenthesis_)
            + ToString (_r_parenthesis_)
            + ToString (_l_cu_bracket_)
            + ToString (_body_)
            + ToString (_r_cu_bracket_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _main_program_ == child )
        {
            _main_program_ = null;
            return;
        }
        if ( _l_parenthesis_ == child )
        {
            _l_parenthesis_ = null;
            return;
        }
        if ( _r_parenthesis_ == child )
        {
            _r_parenthesis_ = null;
            return;
        }
        if ( _l_cu_bracket_ == child )
        {
            _l_cu_bracket_ = null;
            return;
        }
        if ( _body_ == child )
        {
            _body_ = null;
            return;
        }
        if ( _r_cu_bracket_ == child )
        {
            _r_cu_bracket_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _main_program_ == oldChild )
        {
            SetMainProgram ((TMainProgram) newChild);
            return;
        }
        if ( _l_parenthesis_ == oldChild )
        {
            SetLParenthesis ((TLParenthesis) newChild);
            return;
        }
        if ( _r_parenthesis_ == oldChild )
        {
            SetRParenthesis ((TRParenthesis) newChild);
            return;
        }
        if ( _l_cu_bracket_ == oldChild )
        {
            SetLCuBracket ((TLCuBracket) newChild);
            return;
        }
        if ( _body_ == oldChild )
        {
            SetBody ((PBody) newChild);
            return;
        }
        if ( _r_cu_bracket_ == oldChild )
        {
            SetRCuBracket ((TRCuBracket) newChild);
            return;
        }
    }

}
public sealed class AConstantSideBody : PBody
{
    private PConstant _constant_;
    private PBody _body_;

    public AConstantSideBody ()
    {
    }

    public AConstantSideBody (
            PConstant _constant_,
            PBody _body_
    )
    {
        SetConstant (_constant_);
        SetBody (_body_);
    }

    public override Object Clone()
    {
        return new AConstantSideBody (
            (PConstant)CloneNode (_constant_),
            (PBody)CloneNode (_body_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAConstantSideBody(this);
    }

    public PConstant GetConstant ()
    {
        return _constant_;
    }

    public void SetConstant (PConstant node)
    {
        if(_constant_ != null)
        {
            _constant_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constant_ = node;
    }
    public PBody GetBody ()
    {
        return _body_;
    }

    public void SetBody (PBody node)
    {
        if(_body_ != null)
        {
            _body_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _body_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constant_)
            + ToString (_body_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constant_ == child )
        {
            _constant_ = null;
            return;
        }
        if ( _body_ == child )
        {
            _body_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _constant_ == oldChild )
        {
            SetConstant ((PConstant) newChild);
            return;
        }
        if ( _body_ == oldChild )
        {
            SetBody ((PBody) newChild);
            return;
        }
    }

}
public sealed class AIfSideBody : PBody
{
    private PIfStatement _if_statement_;
    private PBody _body_;

    public AIfSideBody ()
    {
    }

    public AIfSideBody (
            PIfStatement _if_statement_,
            PBody _body_
    )
    {
        SetIfStatement (_if_statement_);
        SetBody (_body_);
    }

    public override Object Clone()
    {
        return new AIfSideBody (
            (PIfStatement)CloneNode (_if_statement_),
            (PBody)CloneNode (_body_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfSideBody(this);
    }

    public PIfStatement GetIfStatement ()
    {
        return _if_statement_;
    }

    public void SetIfStatement (PIfStatement node)
    {
        if(_if_statement_ != null)
        {
            _if_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_statement_ = node;
    }
    public PBody GetBody ()
    {
        return _body_;
    }

    public void SetBody (PBody node)
    {
        if(_body_ != null)
        {
            _body_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _body_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_statement_)
            + ToString (_body_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_statement_ == child )
        {
            _if_statement_ = null;
            return;
        }
        if ( _body_ == child )
        {
            _body_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_statement_ == oldChild )
        {
            SetIfStatement ((PIfStatement) newChild);
            return;
        }
        if ( _body_ == oldChild )
        {
            SetBody ((PBody) newChild);
            return;
        }
    }

}
public sealed class AWhileSideBody : PBody
{
    private PWhileStatement _while_statement_;
    private PBody _body_;

    public AWhileSideBody ()
    {
    }

    public AWhileSideBody (
            PWhileStatement _while_statement_,
            PBody _body_
    )
    {
        SetWhileStatement (_while_statement_);
        SetBody (_body_);
    }

    public override Object Clone()
    {
        return new AWhileSideBody (
            (PWhileStatement)CloneNode (_while_statement_),
            (PBody)CloneNode (_body_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWhileSideBody(this);
    }

    public PWhileStatement GetWhileStatement ()
    {
        return _while_statement_;
    }

    public void SetWhileStatement (PWhileStatement node)
    {
        if(_while_statement_ != null)
        {
            _while_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _while_statement_ = node;
    }
    public PBody GetBody ()
    {
        return _body_;
    }

    public void SetBody (PBody node)
    {
        if(_body_ != null)
        {
            _body_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _body_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_while_statement_)
            + ToString (_body_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _while_statement_ == child )
        {
            _while_statement_ = null;
            return;
        }
        if ( _body_ == child )
        {
            _body_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _while_statement_ == oldChild )
        {
            SetWhileStatement ((PWhileStatement) newChild);
            return;
        }
        if ( _body_ == oldChild )
        {
            SetBody ((PBody) newChild);
            return;
        }
    }

}
public sealed class AExpressionSideBody : PBody
{
    private PExpressionMain _expression_main_;
    private PBody _body_;

    public AExpressionSideBody ()
    {
    }

    public AExpressionSideBody (
            PExpressionMain _expression_main_,
            PBody _body_
    )
    {
        SetExpressionMain (_expression_main_);
        SetBody (_body_);
    }

    public override Object Clone()
    {
        return new AExpressionSideBody (
            (PExpressionMain)CloneNode (_expression_main_),
            (PBody)CloneNode (_body_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAExpressionSideBody(this);
    }

    public PExpressionMain GetExpressionMain ()
    {
        return _expression_main_;
    }

    public void SetExpressionMain (PExpressionMain node)
    {
        if(_expression_main_ != null)
        {
            _expression_main_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_main_ = node;
    }
    public PBody GetBody ()
    {
        return _body_;
    }

    public void SetBody (PBody node)
    {
        if(_body_ != null)
        {
            _body_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _body_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_main_)
            + ToString (_body_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_main_ == child )
        {
            _expression_main_ = null;
            return;
        }
        if ( _body_ == child )
        {
            _body_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_main_ == oldChild )
        {
            SetExpressionMain ((PExpressionMain) newChild);
            return;
        }
        if ( _body_ == oldChild )
        {
            SetBody ((PBody) newChild);
            return;
        }
    }

}
public sealed class AVariableSideBody : PBody
{
    private PVariableDeclaration _variable_declaration_;
    private PBody _body_;

    public AVariableSideBody ()
    {
    }

    public AVariableSideBody (
            PVariableDeclaration _variable_declaration_,
            PBody _body_
    )
    {
        SetVariableDeclaration (_variable_declaration_);
        SetBody (_body_);
    }

    public override Object Clone()
    {
        return new AVariableSideBody (
            (PVariableDeclaration)CloneNode (_variable_declaration_),
            (PBody)CloneNode (_body_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVariableSideBody(this);
    }

    public PVariableDeclaration GetVariableDeclaration ()
    {
        return _variable_declaration_;
    }

    public void SetVariableDeclaration (PVariableDeclaration node)
    {
        if(_variable_declaration_ != null)
        {
            _variable_declaration_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _variable_declaration_ = node;
    }
    public PBody GetBody ()
    {
        return _body_;
    }

    public void SetBody (PBody node)
    {
        if(_body_ != null)
        {
            _body_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _body_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_variable_declaration_)
            + ToString (_body_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _variable_declaration_ == child )
        {
            _variable_declaration_ = null;
            return;
        }
        if ( _body_ == child )
        {
            _body_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _variable_declaration_ == oldChild )
        {
            SetVariableDeclaration ((PVariableDeclaration) newChild);
            return;
        }
        if ( _body_ == oldChild )
        {
            SetBody ((PBody) newChild);
            return;
        }
    }

}
public sealed class AProcedureCallSideBody : PBody
{
    private PProcedureCall _procedure_call_;
    private PBody _body_;

    public AProcedureCallSideBody ()
    {
    }

    public AProcedureCallSideBody (
            PProcedureCall _procedure_call_,
            PBody _body_
    )
    {
        SetProcedureCall (_procedure_call_);
        SetBody (_body_);
    }

    public override Object Clone()
    {
        return new AProcedureCallSideBody (
            (PProcedureCall)CloneNode (_procedure_call_),
            (PBody)CloneNode (_body_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProcedureCallSideBody(this);
    }

    public PProcedureCall GetProcedureCall ()
    {
        return _procedure_call_;
    }

    public void SetProcedureCall (PProcedureCall node)
    {
        if(_procedure_call_ != null)
        {
            _procedure_call_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _procedure_call_ = node;
    }
    public PBody GetBody ()
    {
        return _body_;
    }

    public void SetBody (PBody node)
    {
        if(_body_ != null)
        {
            _body_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _body_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_procedure_call_)
            + ToString (_body_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _procedure_call_ == child )
        {
            _procedure_call_ = null;
            return;
        }
        if ( _body_ == child )
        {
            _body_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _procedure_call_ == oldChild )
        {
            SetProcedureCall ((PProcedureCall) newChild);
            return;
        }
        if ( _body_ == oldChild )
        {
            SetBody ((PBody) newChild);
            return;
        }
    }

}
public sealed class AProcedureSideBody : PBody
{
    private PProcedureDeclaration _procedure_declaration_;
    private PBody _body_;

    public AProcedureSideBody ()
    {
    }

    public AProcedureSideBody (
            PProcedureDeclaration _procedure_declaration_,
            PBody _body_
    )
    {
        SetProcedureDeclaration (_procedure_declaration_);
        SetBody (_body_);
    }

    public override Object Clone()
    {
        return new AProcedureSideBody (
            (PProcedureDeclaration)CloneNode (_procedure_declaration_),
            (PBody)CloneNode (_body_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProcedureSideBody(this);
    }

    public PProcedureDeclaration GetProcedureDeclaration ()
    {
        return _procedure_declaration_;
    }

    public void SetProcedureDeclaration (PProcedureDeclaration node)
    {
        if(_procedure_declaration_ != null)
        {
            _procedure_declaration_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _procedure_declaration_ = node;
    }
    public PBody GetBody ()
    {
        return _body_;
    }

    public void SetBody (PBody node)
    {
        if(_body_ != null)
        {
            _body_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _body_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_procedure_declaration_)
            + ToString (_body_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _procedure_declaration_ == child )
        {
            _procedure_declaration_ = null;
            return;
        }
        if ( _body_ == child )
        {
            _body_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _procedure_declaration_ == oldChild )
        {
            SetProcedureDeclaration ((PProcedureDeclaration) newChild);
            return;
        }
        if ( _body_ == oldChild )
        {
            SetBody ((PBody) newChild);
            return;
        }
    }

}
public sealed class AAssignmentSideBody : PBody
{
    private PAssignment _assignment_;
    private PBody _body_;

    public AAssignmentSideBody ()
    {
    }

    public AAssignmentSideBody (
            PAssignment _assignment_,
            PBody _body_
    )
    {
        SetAssignment (_assignment_);
        SetBody (_body_);
    }

    public override Object Clone()
    {
        return new AAssignmentSideBody (
            (PAssignment)CloneNode (_assignment_),
            (PBody)CloneNode (_body_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignmentSideBody(this);
    }

    public PAssignment GetAssignment ()
    {
        return _assignment_;
    }

    public void SetAssignment (PAssignment node)
    {
        if(_assignment_ != null)
        {
            _assignment_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assignment_ = node;
    }
    public PBody GetBody ()
    {
        return _body_;
    }

    public void SetBody (PBody node)
    {
        if(_body_ != null)
        {
            _body_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _body_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_assignment_)
            + ToString (_body_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _assignment_ == child )
        {
            _assignment_ = null;
            return;
        }
        if ( _body_ == child )
        {
            _body_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _assignment_ == oldChild )
        {
            SetAssignment ((PAssignment) newChild);
            return;
        }
        if ( _body_ == oldChild )
        {
            SetBody ((PBody) newChild);
            return;
        }
    }

}
public sealed class AEmptyBodyBody : PBody
{


    public AEmptyBodyBody (
    )
    {
    }

    public override Object Clone()
    {
        return new AEmptyBodyBody (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEmptyBodyBody(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AIfSideBodyLesser : PBodyLesser
{
    private PIfStatement _if_statement_;
    private PBodyLesser _body_lesser_;

    public AIfSideBodyLesser ()
    {
    }

    public AIfSideBodyLesser (
            PIfStatement _if_statement_,
            PBodyLesser _body_lesser_
    )
    {
        SetIfStatement (_if_statement_);
        SetBodyLesser (_body_lesser_);
    }

    public override Object Clone()
    {
        return new AIfSideBodyLesser (
            (PIfStatement)CloneNode (_if_statement_),
            (PBodyLesser)CloneNode (_body_lesser_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfSideBodyLesser(this);
    }

    public PIfStatement GetIfStatement ()
    {
        return _if_statement_;
    }

    public void SetIfStatement (PIfStatement node)
    {
        if(_if_statement_ != null)
        {
            _if_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_statement_ = node;
    }
    public PBodyLesser GetBodyLesser ()
    {
        return _body_lesser_;
    }

    public void SetBodyLesser (PBodyLesser node)
    {
        if(_body_lesser_ != null)
        {
            _body_lesser_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _body_lesser_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_statement_)
            + ToString (_body_lesser_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_statement_ == child )
        {
            _if_statement_ = null;
            return;
        }
        if ( _body_lesser_ == child )
        {
            _body_lesser_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_statement_ == oldChild )
        {
            SetIfStatement ((PIfStatement) newChild);
            return;
        }
        if ( _body_lesser_ == oldChild )
        {
            SetBodyLesser ((PBodyLesser) newChild);
            return;
        }
    }

}
public sealed class AWhileSideBodyLesser : PBodyLesser
{
    private PWhileStatement _while_statement_;
    private PBodyLesser _body_lesser_;

    public AWhileSideBodyLesser ()
    {
    }

    public AWhileSideBodyLesser (
            PWhileStatement _while_statement_,
            PBodyLesser _body_lesser_
    )
    {
        SetWhileStatement (_while_statement_);
        SetBodyLesser (_body_lesser_);
    }

    public override Object Clone()
    {
        return new AWhileSideBodyLesser (
            (PWhileStatement)CloneNode (_while_statement_),
            (PBodyLesser)CloneNode (_body_lesser_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWhileSideBodyLesser(this);
    }

    public PWhileStatement GetWhileStatement ()
    {
        return _while_statement_;
    }

    public void SetWhileStatement (PWhileStatement node)
    {
        if(_while_statement_ != null)
        {
            _while_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _while_statement_ = node;
    }
    public PBodyLesser GetBodyLesser ()
    {
        return _body_lesser_;
    }

    public void SetBodyLesser (PBodyLesser node)
    {
        if(_body_lesser_ != null)
        {
            _body_lesser_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _body_lesser_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_while_statement_)
            + ToString (_body_lesser_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _while_statement_ == child )
        {
            _while_statement_ = null;
            return;
        }
        if ( _body_lesser_ == child )
        {
            _body_lesser_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _while_statement_ == oldChild )
        {
            SetWhileStatement ((PWhileStatement) newChild);
            return;
        }
        if ( _body_lesser_ == oldChild )
        {
            SetBodyLesser ((PBodyLesser) newChild);
            return;
        }
    }

}
public sealed class AExpressionSideBodyLesser : PBodyLesser
{
    private PExpressionMain _expression_main_;
    private PBodyLesser _body_lesser_;

    public AExpressionSideBodyLesser ()
    {
    }

    public AExpressionSideBodyLesser (
            PExpressionMain _expression_main_,
            PBodyLesser _body_lesser_
    )
    {
        SetExpressionMain (_expression_main_);
        SetBodyLesser (_body_lesser_);
    }

    public override Object Clone()
    {
        return new AExpressionSideBodyLesser (
            (PExpressionMain)CloneNode (_expression_main_),
            (PBodyLesser)CloneNode (_body_lesser_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAExpressionSideBodyLesser(this);
    }

    public PExpressionMain GetExpressionMain ()
    {
        return _expression_main_;
    }

    public void SetExpressionMain (PExpressionMain node)
    {
        if(_expression_main_ != null)
        {
            _expression_main_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_main_ = node;
    }
    public PBodyLesser GetBodyLesser ()
    {
        return _body_lesser_;
    }

    public void SetBodyLesser (PBodyLesser node)
    {
        if(_body_lesser_ != null)
        {
            _body_lesser_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _body_lesser_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_main_)
            + ToString (_body_lesser_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_main_ == child )
        {
            _expression_main_ = null;
            return;
        }
        if ( _body_lesser_ == child )
        {
            _body_lesser_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_main_ == oldChild )
        {
            SetExpressionMain ((PExpressionMain) newChild);
            return;
        }
        if ( _body_lesser_ == oldChild )
        {
            SetBodyLesser ((PBodyLesser) newChild);
            return;
        }
    }

}
public sealed class AProcedureCallSideBodyLesser : PBodyLesser
{
    private PProcedureCall _procedure_call_;
    private PBodyLesser _body_lesser_;

    public AProcedureCallSideBodyLesser ()
    {
    }

    public AProcedureCallSideBodyLesser (
            PProcedureCall _procedure_call_,
            PBodyLesser _body_lesser_
    )
    {
        SetProcedureCall (_procedure_call_);
        SetBodyLesser (_body_lesser_);
    }

    public override Object Clone()
    {
        return new AProcedureCallSideBodyLesser (
            (PProcedureCall)CloneNode (_procedure_call_),
            (PBodyLesser)CloneNode (_body_lesser_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProcedureCallSideBodyLesser(this);
    }

    public PProcedureCall GetProcedureCall ()
    {
        return _procedure_call_;
    }

    public void SetProcedureCall (PProcedureCall node)
    {
        if(_procedure_call_ != null)
        {
            _procedure_call_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _procedure_call_ = node;
    }
    public PBodyLesser GetBodyLesser ()
    {
        return _body_lesser_;
    }

    public void SetBodyLesser (PBodyLesser node)
    {
        if(_body_lesser_ != null)
        {
            _body_lesser_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _body_lesser_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_procedure_call_)
            + ToString (_body_lesser_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _procedure_call_ == child )
        {
            _procedure_call_ = null;
            return;
        }
        if ( _body_lesser_ == child )
        {
            _body_lesser_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _procedure_call_ == oldChild )
        {
            SetProcedureCall ((PProcedureCall) newChild);
            return;
        }
        if ( _body_lesser_ == oldChild )
        {
            SetBodyLesser ((PBodyLesser) newChild);
            return;
        }
    }

}
public sealed class AAssignmentSideBodyLesser : PBodyLesser
{
    private PAssignment _assignment_;
    private PBody _body_;

    public AAssignmentSideBodyLesser ()
    {
    }

    public AAssignmentSideBodyLesser (
            PAssignment _assignment_,
            PBody _body_
    )
    {
        SetAssignment (_assignment_);
        SetBody (_body_);
    }

    public override Object Clone()
    {
        return new AAssignmentSideBodyLesser (
            (PAssignment)CloneNode (_assignment_),
            (PBody)CloneNode (_body_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignmentSideBodyLesser(this);
    }

    public PAssignment GetAssignment ()
    {
        return _assignment_;
    }

    public void SetAssignment (PAssignment node)
    {
        if(_assignment_ != null)
        {
            _assignment_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assignment_ = node;
    }
    public PBody GetBody ()
    {
        return _body_;
    }

    public void SetBody (PBody node)
    {
        if(_body_ != null)
        {
            _body_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _body_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_assignment_)
            + ToString (_body_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _assignment_ == child )
        {
            _assignment_ = null;
            return;
        }
        if ( _body_ == child )
        {
            _body_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _assignment_ == oldChild )
        {
            SetAssignment ((PAssignment) newChild);
            return;
        }
        if ( _body_ == oldChild )
        {
            SetBody ((PBody) newChild);
            return;
        }
    }

}
public sealed class AEmptyBodyBodyLesser : PBodyLesser
{


    public AEmptyBodyBodyLesser (
    )
    {
    }

    public override Object Clone()
    {
        return new AEmptyBodyBodyLesser (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEmptyBodyBodyLesser(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AConstantBaseConstant : PConstant
{
    private TConstToken _const_token_;
    private TId _datatype_;
    private TSeperator _seperator_;
    private TId _varname_;
    private TEqual _equal_;
    private PExpression _expression_;
    private TSemicolon _semicolon_;

    public AConstantBaseConstant ()
    {
    }

    public AConstantBaseConstant (
            TConstToken _const_token_,
            TId _datatype_,
            TSeperator _seperator_,
            TId _varname_,
            TEqual _equal_,
            PExpression _expression_,
            TSemicolon _semicolon_
    )
    {
        SetConstToken (_const_token_);
        SetDatatype (_datatype_);
        SetSeperator (_seperator_);
        SetVarname (_varname_);
        SetEqual (_equal_);
        SetExpression (_expression_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new AConstantBaseConstant (
            (TConstToken)CloneNode (_const_token_),
            (TId)CloneNode (_datatype_),
            (TSeperator)CloneNode (_seperator_),
            (TId)CloneNode (_varname_),
            (TEqual)CloneNode (_equal_),
            (PExpression)CloneNode (_expression_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAConstantBaseConstant(this);
    }

    public TConstToken GetConstToken ()
    {
        return _const_token_;
    }

    public void SetConstToken (TConstToken node)
    {
        if(_const_token_ != null)
        {
            _const_token_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _const_token_ = node;
    }
    public TId GetDatatype ()
    {
        return _datatype_;
    }

    public void SetDatatype (TId node)
    {
        if(_datatype_ != null)
        {
            _datatype_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _datatype_ = node;
    }
    public TSeperator GetSeperator ()
    {
        return _seperator_;
    }

    public void SetSeperator (TSeperator node)
    {
        if(_seperator_ != null)
        {
            _seperator_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _seperator_ = node;
    }
    public TId GetVarname ()
    {
        return _varname_;
    }

    public void SetVarname (TId node)
    {
        if(_varname_ != null)
        {
            _varname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _varname_ = node;
    }
    public TEqual GetEqual ()
    {
        return _equal_;
    }

    public void SetEqual (TEqual node)
    {
        if(_equal_ != null)
        {
            _equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equal_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_const_token_)
            + ToString (_datatype_)
            + ToString (_seperator_)
            + ToString (_varname_)
            + ToString (_equal_)
            + ToString (_expression_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _const_token_ == child )
        {
            _const_token_ = null;
            return;
        }
        if ( _datatype_ == child )
        {
            _datatype_ = null;
            return;
        }
        if ( _seperator_ == child )
        {
            _seperator_ = null;
            return;
        }
        if ( _varname_ == child )
        {
            _varname_ = null;
            return;
        }
        if ( _equal_ == child )
        {
            _equal_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _const_token_ == oldChild )
        {
            SetConstToken ((TConstToken) newChild);
            return;
        }
        if ( _datatype_ == oldChild )
        {
            SetDatatype ((TId) newChild);
            return;
        }
        if ( _seperator_ == oldChild )
        {
            SetSeperator ((TSeperator) newChild);
            return;
        }
        if ( _varname_ == oldChild )
        {
            SetVarname ((TId) newChild);
            return;
        }
        if ( _equal_ == oldChild )
        {
            SetEqual ((TEqual) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class AVarBaseVariableDeclaration : PVariableDeclaration
{
    private TId _datatype_;
    private TSeperator _seperator_;
    private TId _varname_;
    private TSemicolon _semicolon_;

    public AVarBaseVariableDeclaration ()
    {
    }

    public AVarBaseVariableDeclaration (
            TId _datatype_,
            TSeperator _seperator_,
            TId _varname_,
            TSemicolon _semicolon_
    )
    {
        SetDatatype (_datatype_);
        SetSeperator (_seperator_);
        SetVarname (_varname_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new AVarBaseVariableDeclaration (
            (TId)CloneNode (_datatype_),
            (TSeperator)CloneNode (_seperator_),
            (TId)CloneNode (_varname_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVarBaseVariableDeclaration(this);
    }

    public TId GetDatatype ()
    {
        return _datatype_;
    }

    public void SetDatatype (TId node)
    {
        if(_datatype_ != null)
        {
            _datatype_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _datatype_ = node;
    }
    public TSeperator GetSeperator ()
    {
        return _seperator_;
    }

    public void SetSeperator (TSeperator node)
    {
        if(_seperator_ != null)
        {
            _seperator_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _seperator_ = node;
    }
    public TId GetVarname ()
    {
        return _varname_;
    }

    public void SetVarname (TId node)
    {
        if(_varname_ != null)
        {
            _varname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _varname_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_datatype_)
            + ToString (_seperator_)
            + ToString (_varname_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _datatype_ == child )
        {
            _datatype_ = null;
            return;
        }
        if ( _seperator_ == child )
        {
            _seperator_ = null;
            return;
        }
        if ( _varname_ == child )
        {
            _varname_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _datatype_ == oldChild )
        {
            SetDatatype ((TId) newChild);
            return;
        }
        if ( _seperator_ == oldChild )
        {
            SetSeperator ((TSeperator) newChild);
            return;
        }
        if ( _varname_ == oldChild )
        {
            SetVarname ((TId) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class AArrayDeclarationBaseVariableDeclaration : PVariableDeclaration
{
    private TId _datatype_;
    private TSeperator _seperator_;
    private TId _varname_;
    private TLSqBracket _l_sq_bracket_;
    private TRSqBracket _r_sq_bracket_;
    private TSemicolon _semicolon_;

    public AArrayDeclarationBaseVariableDeclaration ()
    {
    }

    public AArrayDeclarationBaseVariableDeclaration (
            TId _datatype_,
            TSeperator _seperator_,
            TId _varname_,
            TLSqBracket _l_sq_bracket_,
            TRSqBracket _r_sq_bracket_,
            TSemicolon _semicolon_
    )
    {
        SetDatatype (_datatype_);
        SetSeperator (_seperator_);
        SetVarname (_varname_);
        SetLSqBracket (_l_sq_bracket_);
        SetRSqBracket (_r_sq_bracket_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new AArrayDeclarationBaseVariableDeclaration (
            (TId)CloneNode (_datatype_),
            (TSeperator)CloneNode (_seperator_),
            (TId)CloneNode (_varname_),
            (TLSqBracket)CloneNode (_l_sq_bracket_),
            (TRSqBracket)CloneNode (_r_sq_bracket_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAArrayDeclarationBaseVariableDeclaration(this);
    }

    public TId GetDatatype ()
    {
        return _datatype_;
    }

    public void SetDatatype (TId node)
    {
        if(_datatype_ != null)
        {
            _datatype_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _datatype_ = node;
    }
    public TSeperator GetSeperator ()
    {
        return _seperator_;
    }

    public void SetSeperator (TSeperator node)
    {
        if(_seperator_ != null)
        {
            _seperator_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _seperator_ = node;
    }
    public TId GetVarname ()
    {
        return _varname_;
    }

    public void SetVarname (TId node)
    {
        if(_varname_ != null)
        {
            _varname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _varname_ = node;
    }
    public TLSqBracket GetLSqBracket ()
    {
        return _l_sq_bracket_;
    }

    public void SetLSqBracket (TLSqBracket node)
    {
        if(_l_sq_bracket_ != null)
        {
            _l_sq_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_sq_bracket_ = node;
    }
    public TRSqBracket GetRSqBracket ()
    {
        return _r_sq_bracket_;
    }

    public void SetRSqBracket (TRSqBracket node)
    {
        if(_r_sq_bracket_ != null)
        {
            _r_sq_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_sq_bracket_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_datatype_)
            + ToString (_seperator_)
            + ToString (_varname_)
            + ToString (_l_sq_bracket_)
            + ToString (_r_sq_bracket_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _datatype_ == child )
        {
            _datatype_ = null;
            return;
        }
        if ( _seperator_ == child )
        {
            _seperator_ = null;
            return;
        }
        if ( _varname_ == child )
        {
            _varname_ = null;
            return;
        }
        if ( _l_sq_bracket_ == child )
        {
            _l_sq_bracket_ = null;
            return;
        }
        if ( _r_sq_bracket_ == child )
        {
            _r_sq_bracket_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _datatype_ == oldChild )
        {
            SetDatatype ((TId) newChild);
            return;
        }
        if ( _seperator_ == oldChild )
        {
            SetSeperator ((TSeperator) newChild);
            return;
        }
        if ( _varname_ == oldChild )
        {
            SetVarname ((TId) newChild);
            return;
        }
        if ( _l_sq_bracket_ == oldChild )
        {
            SetLSqBracket ((TLSqBracket) newChild);
            return;
        }
        if ( _r_sq_bracket_ == oldChild )
        {
            SetRSqBracket ((TRSqBracket) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class AStandardAssignmentAssignment : PAssignment
{
    private TId _varname_;
    private TEqual _equal_;
    private PExpression _expression_;
    private TSemicolon _semicolon_;

    public AStandardAssignmentAssignment ()
    {
    }

    public AStandardAssignmentAssignment (
            TId _varname_,
            TEqual _equal_,
            PExpression _expression_,
            TSemicolon _semicolon_
    )
    {
        SetVarname (_varname_);
        SetEqual (_equal_);
        SetExpression (_expression_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new AStandardAssignmentAssignment (
            (TId)CloneNode (_varname_),
            (TEqual)CloneNode (_equal_),
            (PExpression)CloneNode (_expression_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStandardAssignmentAssignment(this);
    }

    public TId GetVarname ()
    {
        return _varname_;
    }

    public void SetVarname (TId node)
    {
        if(_varname_ != null)
        {
            _varname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _varname_ = node;
    }
    public TEqual GetEqual ()
    {
        return _equal_;
    }

    public void SetEqual (TEqual node)
    {
        if(_equal_ != null)
        {
            _equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equal_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_varname_)
            + ToString (_equal_)
            + ToString (_expression_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _varname_ == child )
        {
            _varname_ = null;
            return;
        }
        if ( _equal_ == child )
        {
            _equal_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _varname_ == oldChild )
        {
            SetVarname ((TId) newChild);
            return;
        }
        if ( _equal_ == oldChild )
        {
            SetEqual ((TEqual) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class AArrayAssignmentAssignment : PAssignment
{
    private TId _varname_;
    private TLSqBracket _l_sq_bracket_;
    private PExpression _array_place_;
    private TRSqBracket _r_sq_bracket_;
    private TEqual _equal_;
    private PExpression _value_;
    private TSemicolon _semicolon_;

    public AArrayAssignmentAssignment ()
    {
    }

    public AArrayAssignmentAssignment (
            TId _varname_,
            TLSqBracket _l_sq_bracket_,
            PExpression _array_place_,
            TRSqBracket _r_sq_bracket_,
            TEqual _equal_,
            PExpression _value_,
            TSemicolon _semicolon_
    )
    {
        SetVarname (_varname_);
        SetLSqBracket (_l_sq_bracket_);
        SetArrayPlace (_array_place_);
        SetRSqBracket (_r_sq_bracket_);
        SetEqual (_equal_);
        SetValue (_value_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new AArrayAssignmentAssignment (
            (TId)CloneNode (_varname_),
            (TLSqBracket)CloneNode (_l_sq_bracket_),
            (PExpression)CloneNode (_array_place_),
            (TRSqBracket)CloneNode (_r_sq_bracket_),
            (TEqual)CloneNode (_equal_),
            (PExpression)CloneNode (_value_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAArrayAssignmentAssignment(this);
    }

    public TId GetVarname ()
    {
        return _varname_;
    }

    public void SetVarname (TId node)
    {
        if(_varname_ != null)
        {
            _varname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _varname_ = node;
    }
    public TLSqBracket GetLSqBracket ()
    {
        return _l_sq_bracket_;
    }

    public void SetLSqBracket (TLSqBracket node)
    {
        if(_l_sq_bracket_ != null)
        {
            _l_sq_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_sq_bracket_ = node;
    }
    public PExpression GetArrayPlace ()
    {
        return _array_place_;
    }

    public void SetArrayPlace (PExpression node)
    {
        if(_array_place_ != null)
        {
            _array_place_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _array_place_ = node;
    }
    public TRSqBracket GetRSqBracket ()
    {
        return _r_sq_bracket_;
    }

    public void SetRSqBracket (TRSqBracket node)
    {
        if(_r_sq_bracket_ != null)
        {
            _r_sq_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_sq_bracket_ = node;
    }
    public TEqual GetEqual ()
    {
        return _equal_;
    }

    public void SetEqual (TEqual node)
    {
        if(_equal_ != null)
        {
            _equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equal_ = node;
    }
    public PExpression GetValue ()
    {
        return _value_;
    }

    public void SetValue (PExpression node)
    {
        if(_value_ != null)
        {
            _value_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _value_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_varname_)
            + ToString (_l_sq_bracket_)
            + ToString (_array_place_)
            + ToString (_r_sq_bracket_)
            + ToString (_equal_)
            + ToString (_value_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _varname_ == child )
        {
            _varname_ = null;
            return;
        }
        if ( _l_sq_bracket_ == child )
        {
            _l_sq_bracket_ = null;
            return;
        }
        if ( _array_place_ == child )
        {
            _array_place_ = null;
            return;
        }
        if ( _r_sq_bracket_ == child )
        {
            _r_sq_bracket_ = null;
            return;
        }
        if ( _equal_ == child )
        {
            _equal_ = null;
            return;
        }
        if ( _value_ == child )
        {
            _value_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _varname_ == oldChild )
        {
            SetVarname ((TId) newChild);
            return;
        }
        if ( _l_sq_bracket_ == oldChild )
        {
            SetLSqBracket ((TLSqBracket) newChild);
            return;
        }
        if ( _array_place_ == oldChild )
        {
            SetArrayPlace ((PExpression) newChild);
            return;
        }
        if ( _r_sq_bracket_ == oldChild )
        {
            SetRSqBracket ((TRSqBracket) newChild);
            return;
        }
        if ( _equal_ == oldChild )
        {
            SetEqual ((TEqual) newChild);
            return;
        }
        if ( _value_ == oldChild )
        {
            SetValue ((PExpression) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class AIfBaseIfStatement : PIfStatement
{
    private TIf _if_;
    private TLParenthesis _l_parenthesis_;
    private PExpression _expression_;
    private TRParenthesis _r_parenthesis_;
    private TLCuBracket _l_cu_bracket_;
    private PBodyLesser _body_lesser_;
    private TRCuBracket _r_cu_bracket_;

    public AIfBaseIfStatement ()
    {
    }

    public AIfBaseIfStatement (
            TIf _if_,
            TLParenthesis _l_parenthesis_,
            PExpression _expression_,
            TRParenthesis _r_parenthesis_,
            TLCuBracket _l_cu_bracket_,
            PBodyLesser _body_lesser_,
            TRCuBracket _r_cu_bracket_
    )
    {
        SetIf (_if_);
        SetLParenthesis (_l_parenthesis_);
        SetExpression (_expression_);
        SetRParenthesis (_r_parenthesis_);
        SetLCuBracket (_l_cu_bracket_);
        SetBodyLesser (_body_lesser_);
        SetRCuBracket (_r_cu_bracket_);
    }

    public override Object Clone()
    {
        return new AIfBaseIfStatement (
            (TIf)CloneNode (_if_),
            (TLParenthesis)CloneNode (_l_parenthesis_),
            (PExpression)CloneNode (_expression_),
            (TRParenthesis)CloneNode (_r_parenthesis_),
            (TLCuBracket)CloneNode (_l_cu_bracket_),
            (PBodyLesser)CloneNode (_body_lesser_),
            (TRCuBracket)CloneNode (_r_cu_bracket_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfBaseIfStatement(this);
    }

    public TIf GetIf ()
    {
        return _if_;
    }

    public void SetIf (TIf node)
    {
        if(_if_ != null)
        {
            _if_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_ = node;
    }
    public TLParenthesis GetLParenthesis ()
    {
        return _l_parenthesis_;
    }

    public void SetLParenthesis (TLParenthesis node)
    {
        if(_l_parenthesis_ != null)
        {
            _l_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_parenthesis_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TRParenthesis GetRParenthesis ()
    {
        return _r_parenthesis_;
    }

    public void SetRParenthesis (TRParenthesis node)
    {
        if(_r_parenthesis_ != null)
        {
            _r_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_parenthesis_ = node;
    }
    public TLCuBracket GetLCuBracket ()
    {
        return _l_cu_bracket_;
    }

    public void SetLCuBracket (TLCuBracket node)
    {
        if(_l_cu_bracket_ != null)
        {
            _l_cu_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_cu_bracket_ = node;
    }
    public PBodyLesser GetBodyLesser ()
    {
        return _body_lesser_;
    }

    public void SetBodyLesser (PBodyLesser node)
    {
        if(_body_lesser_ != null)
        {
            _body_lesser_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _body_lesser_ = node;
    }
    public TRCuBracket GetRCuBracket ()
    {
        return _r_cu_bracket_;
    }

    public void SetRCuBracket (TRCuBracket node)
    {
        if(_r_cu_bracket_ != null)
        {
            _r_cu_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_cu_bracket_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_)
            + ToString (_l_parenthesis_)
            + ToString (_expression_)
            + ToString (_r_parenthesis_)
            + ToString (_l_cu_bracket_)
            + ToString (_body_lesser_)
            + ToString (_r_cu_bracket_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_ == child )
        {
            _if_ = null;
            return;
        }
        if ( _l_parenthesis_ == child )
        {
            _l_parenthesis_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _r_parenthesis_ == child )
        {
            _r_parenthesis_ = null;
            return;
        }
        if ( _l_cu_bracket_ == child )
        {
            _l_cu_bracket_ = null;
            return;
        }
        if ( _body_lesser_ == child )
        {
            _body_lesser_ = null;
            return;
        }
        if ( _r_cu_bracket_ == child )
        {
            _r_cu_bracket_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_ == oldChild )
        {
            SetIf ((TIf) newChild);
            return;
        }
        if ( _l_parenthesis_ == oldChild )
        {
            SetLParenthesis ((TLParenthesis) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _r_parenthesis_ == oldChild )
        {
            SetRParenthesis ((TRParenthesis) newChild);
            return;
        }
        if ( _l_cu_bracket_ == oldChild )
        {
            SetLCuBracket ((TLCuBracket) newChild);
            return;
        }
        if ( _body_lesser_ == oldChild )
        {
            SetBodyLesser ((PBodyLesser) newChild);
            return;
        }
        if ( _r_cu_bracket_ == oldChild )
        {
            SetRCuBracket ((TRCuBracket) newChild);
            return;
        }
    }

}
public sealed class AWhileBaseWhileStatement : PWhileStatement
{
    private TWhile _while_;
    private TLParenthesis _l_parenthesis_;
    private PExpression _expression_;
    private TRParenthesis _r_parenthesis_;
    private TLCuBracket _l_cu_bracket_;
    private PBodyLesser _body_lesser_;
    private TRCuBracket _r_cu_bracket_;

    public AWhileBaseWhileStatement ()
    {
    }

    public AWhileBaseWhileStatement (
            TWhile _while_,
            TLParenthesis _l_parenthesis_,
            PExpression _expression_,
            TRParenthesis _r_parenthesis_,
            TLCuBracket _l_cu_bracket_,
            PBodyLesser _body_lesser_,
            TRCuBracket _r_cu_bracket_
    )
    {
        SetWhile (_while_);
        SetLParenthesis (_l_parenthesis_);
        SetExpression (_expression_);
        SetRParenthesis (_r_parenthesis_);
        SetLCuBracket (_l_cu_bracket_);
        SetBodyLesser (_body_lesser_);
        SetRCuBracket (_r_cu_bracket_);
    }

    public override Object Clone()
    {
        return new AWhileBaseWhileStatement (
            (TWhile)CloneNode (_while_),
            (TLParenthesis)CloneNode (_l_parenthesis_),
            (PExpression)CloneNode (_expression_),
            (TRParenthesis)CloneNode (_r_parenthesis_),
            (TLCuBracket)CloneNode (_l_cu_bracket_),
            (PBodyLesser)CloneNode (_body_lesser_),
            (TRCuBracket)CloneNode (_r_cu_bracket_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWhileBaseWhileStatement(this);
    }

    public TWhile GetWhile ()
    {
        return _while_;
    }

    public void SetWhile (TWhile node)
    {
        if(_while_ != null)
        {
            _while_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _while_ = node;
    }
    public TLParenthesis GetLParenthesis ()
    {
        return _l_parenthesis_;
    }

    public void SetLParenthesis (TLParenthesis node)
    {
        if(_l_parenthesis_ != null)
        {
            _l_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_parenthesis_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TRParenthesis GetRParenthesis ()
    {
        return _r_parenthesis_;
    }

    public void SetRParenthesis (TRParenthesis node)
    {
        if(_r_parenthesis_ != null)
        {
            _r_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_parenthesis_ = node;
    }
    public TLCuBracket GetLCuBracket ()
    {
        return _l_cu_bracket_;
    }

    public void SetLCuBracket (TLCuBracket node)
    {
        if(_l_cu_bracket_ != null)
        {
            _l_cu_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_cu_bracket_ = node;
    }
    public PBodyLesser GetBodyLesser ()
    {
        return _body_lesser_;
    }

    public void SetBodyLesser (PBodyLesser node)
    {
        if(_body_lesser_ != null)
        {
            _body_lesser_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _body_lesser_ = node;
    }
    public TRCuBracket GetRCuBracket ()
    {
        return _r_cu_bracket_;
    }

    public void SetRCuBracket (TRCuBracket node)
    {
        if(_r_cu_bracket_ != null)
        {
            _r_cu_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_cu_bracket_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_while_)
            + ToString (_l_parenthesis_)
            + ToString (_expression_)
            + ToString (_r_parenthesis_)
            + ToString (_l_cu_bracket_)
            + ToString (_body_lesser_)
            + ToString (_r_cu_bracket_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _while_ == child )
        {
            _while_ = null;
            return;
        }
        if ( _l_parenthesis_ == child )
        {
            _l_parenthesis_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _r_parenthesis_ == child )
        {
            _r_parenthesis_ = null;
            return;
        }
        if ( _l_cu_bracket_ == child )
        {
            _l_cu_bracket_ = null;
            return;
        }
        if ( _body_lesser_ == child )
        {
            _body_lesser_ = null;
            return;
        }
        if ( _r_cu_bracket_ == child )
        {
            _r_cu_bracket_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _while_ == oldChild )
        {
            SetWhile ((TWhile) newChild);
            return;
        }
        if ( _l_parenthesis_ == oldChild )
        {
            SetLParenthesis ((TLParenthesis) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _r_parenthesis_ == oldChild )
        {
            SetRParenthesis ((TRParenthesis) newChild);
            return;
        }
        if ( _l_cu_bracket_ == oldChild )
        {
            SetLCuBracket ((TLCuBracket) newChild);
            return;
        }
        if ( _body_lesser_ == oldChild )
        {
            SetBodyLesser ((PBodyLesser) newChild);
            return;
        }
        if ( _r_cu_bracket_ == oldChild )
        {
            SetRCuBracket ((TRCuBracket) newChild);
            return;
        }
    }

}
public sealed class AProcedureCall : PProcedureCall
{
    private TId _varname_;
    private TLParenthesis _l_parenthesis_;
    private PProcedureHelper _procedure_helper_;
    private TRParenthesis _r_parenthesis_;
    private TSemicolon _semicolon_;

    public AProcedureCall ()
    {
    }

    public AProcedureCall (
            TId _varname_,
            TLParenthesis _l_parenthesis_,
            PProcedureHelper _procedure_helper_,
            TRParenthesis _r_parenthesis_,
            TSemicolon _semicolon_
    )
    {
        SetVarname (_varname_);
        SetLParenthesis (_l_parenthesis_);
        SetProcedureHelper (_procedure_helper_);
        SetRParenthesis (_r_parenthesis_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new AProcedureCall (
            (TId)CloneNode (_varname_),
            (TLParenthesis)CloneNode (_l_parenthesis_),
            (PProcedureHelper)CloneNode (_procedure_helper_),
            (TRParenthesis)CloneNode (_r_parenthesis_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProcedureCall(this);
    }

    public TId GetVarname ()
    {
        return _varname_;
    }

    public void SetVarname (TId node)
    {
        if(_varname_ != null)
        {
            _varname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _varname_ = node;
    }
    public TLParenthesis GetLParenthesis ()
    {
        return _l_parenthesis_;
    }

    public void SetLParenthesis (TLParenthesis node)
    {
        if(_l_parenthesis_ != null)
        {
            _l_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_parenthesis_ = node;
    }
    public PProcedureHelper GetProcedureHelper ()
    {
        return _procedure_helper_;
    }

    public void SetProcedureHelper (PProcedureHelper node)
    {
        if(_procedure_helper_ != null)
        {
            _procedure_helper_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _procedure_helper_ = node;
    }
    public TRParenthesis GetRParenthesis ()
    {
        return _r_parenthesis_;
    }

    public void SetRParenthesis (TRParenthesis node)
    {
        if(_r_parenthesis_ != null)
        {
            _r_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_parenthesis_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_varname_)
            + ToString (_l_parenthesis_)
            + ToString (_procedure_helper_)
            + ToString (_r_parenthesis_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _varname_ == child )
        {
            _varname_ = null;
            return;
        }
        if ( _l_parenthesis_ == child )
        {
            _l_parenthesis_ = null;
            return;
        }
        if ( _procedure_helper_ == child )
        {
            _procedure_helper_ = null;
            return;
        }
        if ( _r_parenthesis_ == child )
        {
            _r_parenthesis_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _varname_ == oldChild )
        {
            SetVarname ((TId) newChild);
            return;
        }
        if ( _l_parenthesis_ == oldChild )
        {
            SetLParenthesis ((TLParenthesis) newChild);
            return;
        }
        if ( _procedure_helper_ == oldChild )
        {
            SetProcedureHelper ((PProcedureHelper) newChild);
            return;
        }
        if ( _r_parenthesis_ == oldChild )
        {
            SetRParenthesis ((TRParenthesis) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class AProcedureDeclaration : PProcedureDeclaration
{
    private TId _varname_;
    private TLParenthesis _l_parenthesis_;
    private PProcedureHelper _procedure_helper_;
    private TRParenthesis _r_parenthesis_;
    private TLCuBracket _l_cu_bracket_;
    private PBodyLesser _body_lesser_;
    private TRCuBracket _r_cu_bracket_;

    public AProcedureDeclaration ()
    {
    }

    public AProcedureDeclaration (
            TId _varname_,
            TLParenthesis _l_parenthesis_,
            PProcedureHelper _procedure_helper_,
            TRParenthesis _r_parenthesis_,
            TLCuBracket _l_cu_bracket_,
            PBodyLesser _body_lesser_,
            TRCuBracket _r_cu_bracket_
    )
    {
        SetVarname (_varname_);
        SetLParenthesis (_l_parenthesis_);
        SetProcedureHelper (_procedure_helper_);
        SetRParenthesis (_r_parenthesis_);
        SetLCuBracket (_l_cu_bracket_);
        SetBodyLesser (_body_lesser_);
        SetRCuBracket (_r_cu_bracket_);
    }

    public override Object Clone()
    {
        return new AProcedureDeclaration (
            (TId)CloneNode (_varname_),
            (TLParenthesis)CloneNode (_l_parenthesis_),
            (PProcedureHelper)CloneNode (_procedure_helper_),
            (TRParenthesis)CloneNode (_r_parenthesis_),
            (TLCuBracket)CloneNode (_l_cu_bracket_),
            (PBodyLesser)CloneNode (_body_lesser_),
            (TRCuBracket)CloneNode (_r_cu_bracket_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProcedureDeclaration(this);
    }

    public TId GetVarname ()
    {
        return _varname_;
    }

    public void SetVarname (TId node)
    {
        if(_varname_ != null)
        {
            _varname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _varname_ = node;
    }
    public TLParenthesis GetLParenthesis ()
    {
        return _l_parenthesis_;
    }

    public void SetLParenthesis (TLParenthesis node)
    {
        if(_l_parenthesis_ != null)
        {
            _l_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_parenthesis_ = node;
    }
    public PProcedureHelper GetProcedureHelper ()
    {
        return _procedure_helper_;
    }

    public void SetProcedureHelper (PProcedureHelper node)
    {
        if(_procedure_helper_ != null)
        {
            _procedure_helper_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _procedure_helper_ = node;
    }
    public TRParenthesis GetRParenthesis ()
    {
        return _r_parenthesis_;
    }

    public void SetRParenthesis (TRParenthesis node)
    {
        if(_r_parenthesis_ != null)
        {
            _r_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_parenthesis_ = node;
    }
    public TLCuBracket GetLCuBracket ()
    {
        return _l_cu_bracket_;
    }

    public void SetLCuBracket (TLCuBracket node)
    {
        if(_l_cu_bracket_ != null)
        {
            _l_cu_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_cu_bracket_ = node;
    }
    public PBodyLesser GetBodyLesser ()
    {
        return _body_lesser_;
    }

    public void SetBodyLesser (PBodyLesser node)
    {
        if(_body_lesser_ != null)
        {
            _body_lesser_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _body_lesser_ = node;
    }
    public TRCuBracket GetRCuBracket ()
    {
        return _r_cu_bracket_;
    }

    public void SetRCuBracket (TRCuBracket node)
    {
        if(_r_cu_bracket_ != null)
        {
            _r_cu_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_cu_bracket_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_varname_)
            + ToString (_l_parenthesis_)
            + ToString (_procedure_helper_)
            + ToString (_r_parenthesis_)
            + ToString (_l_cu_bracket_)
            + ToString (_body_lesser_)
            + ToString (_r_cu_bracket_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _varname_ == child )
        {
            _varname_ = null;
            return;
        }
        if ( _l_parenthesis_ == child )
        {
            _l_parenthesis_ = null;
            return;
        }
        if ( _procedure_helper_ == child )
        {
            _procedure_helper_ = null;
            return;
        }
        if ( _r_parenthesis_ == child )
        {
            _r_parenthesis_ = null;
            return;
        }
        if ( _l_cu_bracket_ == child )
        {
            _l_cu_bracket_ = null;
            return;
        }
        if ( _body_lesser_ == child )
        {
            _body_lesser_ = null;
            return;
        }
        if ( _r_cu_bracket_ == child )
        {
            _r_cu_bracket_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _varname_ == oldChild )
        {
            SetVarname ((TId) newChild);
            return;
        }
        if ( _l_parenthesis_ == oldChild )
        {
            SetLParenthesis ((TLParenthesis) newChild);
            return;
        }
        if ( _procedure_helper_ == oldChild )
        {
            SetProcedureHelper ((PProcedureHelper) newChild);
            return;
        }
        if ( _r_parenthesis_ == oldChild )
        {
            SetRParenthesis ((TRParenthesis) newChild);
            return;
        }
        if ( _l_cu_bracket_ == oldChild )
        {
            SetLCuBracket ((TLCuBracket) newChild);
            return;
        }
        if ( _body_lesser_ == oldChild )
        {
            SetBodyLesser ((PBodyLesser) newChild);
            return;
        }
        if ( _r_cu_bracket_ == oldChild )
        {
            SetRCuBracket ((TRCuBracket) newChild);
            return;
        }
    }

}
public sealed class AProcedureHelperMainProcedureHelper : PProcedureHelper
{
    private PProcedureHelper _procedure_helper_;
    private TId _datatype_;
    private TSeperator _seperator_;
    private PExpression _varname_;

    public AProcedureHelperMainProcedureHelper ()
    {
    }

    public AProcedureHelperMainProcedureHelper (
            PProcedureHelper _procedure_helper_,
            TId _datatype_,
            TSeperator _seperator_,
            PExpression _varname_
    )
    {
        SetProcedureHelper (_procedure_helper_);
        SetDatatype (_datatype_);
        SetSeperator (_seperator_);
        SetVarname (_varname_);
    }

    public override Object Clone()
    {
        return new AProcedureHelperMainProcedureHelper (
            (PProcedureHelper)CloneNode (_procedure_helper_),
            (TId)CloneNode (_datatype_),
            (TSeperator)CloneNode (_seperator_),
            (PExpression)CloneNode (_varname_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProcedureHelperMainProcedureHelper(this);
    }

    public PProcedureHelper GetProcedureHelper ()
    {
        return _procedure_helper_;
    }

    public void SetProcedureHelper (PProcedureHelper node)
    {
        if(_procedure_helper_ != null)
        {
            _procedure_helper_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _procedure_helper_ = node;
    }
    public TId GetDatatype ()
    {
        return _datatype_;
    }

    public void SetDatatype (TId node)
    {
        if(_datatype_ != null)
        {
            _datatype_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _datatype_ = node;
    }
    public TSeperator GetSeperator ()
    {
        return _seperator_;
    }

    public void SetSeperator (TSeperator node)
    {
        if(_seperator_ != null)
        {
            _seperator_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _seperator_ = node;
    }
    public PExpression GetVarname ()
    {
        return _varname_;
    }

    public void SetVarname (PExpression node)
    {
        if(_varname_ != null)
        {
            _varname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _varname_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_procedure_helper_)
            + ToString (_datatype_)
            + ToString (_seperator_)
            + ToString (_varname_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _procedure_helper_ == child )
        {
            _procedure_helper_ = null;
            return;
        }
        if ( _datatype_ == child )
        {
            _datatype_ = null;
            return;
        }
        if ( _seperator_ == child )
        {
            _seperator_ = null;
            return;
        }
        if ( _varname_ == child )
        {
            _varname_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _procedure_helper_ == oldChild )
        {
            SetProcedureHelper ((PProcedureHelper) newChild);
            return;
        }
        if ( _datatype_ == oldChild )
        {
            SetDatatype ((TId) newChild);
            return;
        }
        if ( _seperator_ == oldChild )
        {
            SetSeperator ((TSeperator) newChild);
            return;
        }
        if ( _varname_ == oldChild )
        {
            SetVarname ((PExpression) newChild);
            return;
        }
    }

}
public sealed class AProcedureHelperEmptyProcedureHelper : PProcedureHelper
{


    public AProcedureHelperEmptyProcedureHelper (
    )
    {
    }

    public override Object Clone()
    {
        return new AProcedureHelperEmptyProcedureHelper (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProcedureHelperEmptyProcedureHelper(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AExpressionMain : PExpressionMain
{
    private PExpression _expression_;
    private TSemicolon _semicolon_;

    public AExpressionMain ()
    {
    }

    public AExpressionMain (
            PExpression _expression_,
            TSemicolon _semicolon_
    )
    {
        SetExpression (_expression_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new AExpressionMain (
            (PExpression)CloneNode (_expression_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAExpressionMain(this);
    }

    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class AAndBaseExpression : PExpression
{
    private PExpression _expression_;
    private TAndSign _and_sign_;
    private PExpression1 _expression1_;

    public AAndBaseExpression ()
    {
    }

    public AAndBaseExpression (
            PExpression _expression_,
            TAndSign _and_sign_,
            PExpression1 _expression1_
    )
    {
        SetExpression (_expression_);
        SetAndSign (_and_sign_);
        SetExpression1 (_expression1_);
    }

    public override Object Clone()
    {
        return new AAndBaseExpression (
            (PExpression)CloneNode (_expression_),
            (TAndSign)CloneNode (_and_sign_),
            (PExpression1)CloneNode (_expression1_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAndBaseExpression(this);
    }

    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TAndSign GetAndSign ()
    {
        return _and_sign_;
    }

    public void SetAndSign (TAndSign node)
    {
        if(_and_sign_ != null)
        {
            _and_sign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _and_sign_ = node;
    }
    public PExpression1 GetExpression1 ()
    {
        return _expression1_;
    }

    public void SetExpression1 (PExpression1 node)
    {
        if(_expression1_ != null)
        {
            _expression1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression1_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_)
            + ToString (_and_sign_)
            + ToString (_expression1_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _and_sign_ == child )
        {
            _and_sign_ = null;
            return;
        }
        if ( _expression1_ == child )
        {
            _expression1_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _and_sign_ == oldChild )
        {
            SetAndSign ((TAndSign) newChild);
            return;
        }
        if ( _expression1_ == oldChild )
        {
            SetExpression1 ((PExpression1) newChild);
            return;
        }
    }

}
public sealed class AOrBaseExpression : PExpression
{
    private PExpression _expression_;
    private TOrSign _or_sign_;
    private PExpression1 _expression1_;

    public AOrBaseExpression ()
    {
    }

    public AOrBaseExpression (
            PExpression _expression_,
            TOrSign _or_sign_,
            PExpression1 _expression1_
    )
    {
        SetExpression (_expression_);
        SetOrSign (_or_sign_);
        SetExpression1 (_expression1_);
    }

    public override Object Clone()
    {
        return new AOrBaseExpression (
            (PExpression)CloneNode (_expression_),
            (TOrSign)CloneNode (_or_sign_),
            (PExpression1)CloneNode (_expression1_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOrBaseExpression(this);
    }

    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TOrSign GetOrSign ()
    {
        return _or_sign_;
    }

    public void SetOrSign (TOrSign node)
    {
        if(_or_sign_ != null)
        {
            _or_sign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _or_sign_ = node;
    }
    public PExpression1 GetExpression1 ()
    {
        return _expression1_;
    }

    public void SetExpression1 (PExpression1 node)
    {
        if(_expression1_ != null)
        {
            _expression1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression1_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_)
            + ToString (_or_sign_)
            + ToString (_expression1_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _or_sign_ == child )
        {
            _or_sign_ = null;
            return;
        }
        if ( _expression1_ == child )
        {
            _expression1_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _or_sign_ == oldChild )
        {
            SetOrSign ((TOrSign) newChild);
            return;
        }
        if ( _expression1_ == oldChild )
        {
            SetExpression1 ((PExpression1) newChild);
            return;
        }
    }

}
public sealed class ANotBaseExpression : PExpression
{
    private PExpression _expression_;
    private TNotSign _not_sign_;
    private PExpression1 _expression1_;

    public ANotBaseExpression ()
    {
    }

    public ANotBaseExpression (
            PExpression _expression_,
            TNotSign _not_sign_,
            PExpression1 _expression1_
    )
    {
        SetExpression (_expression_);
        SetNotSign (_not_sign_);
        SetExpression1 (_expression1_);
    }

    public override Object Clone()
    {
        return new ANotBaseExpression (
            (PExpression)CloneNode (_expression_),
            (TNotSign)CloneNode (_not_sign_),
            (PExpression1)CloneNode (_expression1_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANotBaseExpression(this);
    }

    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TNotSign GetNotSign ()
    {
        return _not_sign_;
    }

    public void SetNotSign (TNotSign node)
    {
        if(_not_sign_ != null)
        {
            _not_sign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _not_sign_ = node;
    }
    public PExpression1 GetExpression1 ()
    {
        return _expression1_;
    }

    public void SetExpression1 (PExpression1 node)
    {
        if(_expression1_ != null)
        {
            _expression1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression1_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_)
            + ToString (_not_sign_)
            + ToString (_expression1_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _not_sign_ == child )
        {
            _not_sign_ = null;
            return;
        }
        if ( _expression1_ == child )
        {
            _expression1_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _not_sign_ == oldChild )
        {
            SetNotSign ((TNotSign) newChild);
            return;
        }
        if ( _expression1_ == oldChild )
        {
            SetExpression1 ((PExpression1) newChild);
            return;
        }
    }

}
public sealed class AAndNextExpression : PExpression
{
    private PExpression1 _expression1_;

    public AAndNextExpression ()
    {
    }

    public AAndNextExpression (
            PExpression1 _expression1_
    )
    {
        SetExpression1 (_expression1_);
    }

    public override Object Clone()
    {
        return new AAndNextExpression (
            (PExpression1)CloneNode (_expression1_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAndNextExpression(this);
    }

    public PExpression1 GetExpression1 ()
    {
        return _expression1_;
    }

    public void SetExpression1 (PExpression1 node)
    {
        if(_expression1_ != null)
        {
            _expression1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression1_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression1_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression1_ == child )
        {
            _expression1_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression1_ == oldChild )
        {
            SetExpression1 ((PExpression1) newChild);
            return;
        }
    }

}
public sealed class AGreaterThanBaseExpression1 : PExpression1
{
    private PExpression2 _left_;
    private TGreater _greater_;
    private PExpression2 _right_;

    public AGreaterThanBaseExpression1 ()
    {
    }

    public AGreaterThanBaseExpression1 (
            PExpression2 _left_,
            TGreater _greater_,
            PExpression2 _right_
    )
    {
        SetLeft (_left_);
        SetGreater (_greater_);
        SetRight (_right_);
    }

    public override Object Clone()
    {
        return new AGreaterThanBaseExpression1 (
            (PExpression2)CloneNode (_left_),
            (TGreater)CloneNode (_greater_),
            (PExpression2)CloneNode (_right_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGreaterThanBaseExpression1(this);
    }

    public PExpression2 GetLeft ()
    {
        return _left_;
    }

    public void SetLeft (PExpression2 node)
    {
        if(_left_ != null)
        {
            _left_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_ = node;
    }
    public TGreater GetGreater ()
    {
        return _greater_;
    }

    public void SetGreater (TGreater node)
    {
        if(_greater_ != null)
        {
            _greater_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _greater_ = node;
    }
    public PExpression2 GetRight ()
    {
        return _right_;
    }

    public void SetRight (PExpression2 node)
    {
        if(_right_ != null)
        {
            _right_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_left_)
            + ToString (_greater_)
            + ToString (_right_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _left_ == child )
        {
            _left_ = null;
            return;
        }
        if ( _greater_ == child )
        {
            _greater_ = null;
            return;
        }
        if ( _right_ == child )
        {
            _right_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _left_ == oldChild )
        {
            SetLeft ((PExpression2) newChild);
            return;
        }
        if ( _greater_ == oldChild )
        {
            SetGreater ((TGreater) newChild);
            return;
        }
        if ( _right_ == oldChild )
        {
            SetRight ((PExpression2) newChild);
            return;
        }
    }

}
public sealed class ALessThanBaseExpression1 : PExpression1
{
    private PExpression2 _left_;
    private TLess _less_;
    private PExpression2 _right_;

    public ALessThanBaseExpression1 ()
    {
    }

    public ALessThanBaseExpression1 (
            PExpression2 _left_,
            TLess _less_,
            PExpression2 _right_
    )
    {
        SetLeft (_left_);
        SetLess (_less_);
        SetRight (_right_);
    }

    public override Object Clone()
    {
        return new ALessThanBaseExpression1 (
            (PExpression2)CloneNode (_left_),
            (TLess)CloneNode (_less_),
            (PExpression2)CloneNode (_right_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALessThanBaseExpression1(this);
    }

    public PExpression2 GetLeft ()
    {
        return _left_;
    }

    public void SetLeft (PExpression2 node)
    {
        if(_left_ != null)
        {
            _left_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_ = node;
    }
    public TLess GetLess ()
    {
        return _less_;
    }

    public void SetLess (TLess node)
    {
        if(_less_ != null)
        {
            _less_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _less_ = node;
    }
    public PExpression2 GetRight ()
    {
        return _right_;
    }

    public void SetRight (PExpression2 node)
    {
        if(_right_ != null)
        {
            _right_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_left_)
            + ToString (_less_)
            + ToString (_right_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _left_ == child )
        {
            _left_ = null;
            return;
        }
        if ( _less_ == child )
        {
            _less_ = null;
            return;
        }
        if ( _right_ == child )
        {
            _right_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _left_ == oldChild )
        {
            SetLeft ((PExpression2) newChild);
            return;
        }
        if ( _less_ == oldChild )
        {
            SetLess ((TLess) newChild);
            return;
        }
        if ( _right_ == oldChild )
        {
            SetRight ((PExpression2) newChild);
            return;
        }
    }

}
public sealed class ALessThanOrEqualBaseExpression1 : PExpression1
{
    private PExpression2 _left_;
    private TLesserOrEqual _lesser_or_equal_;
    private PExpression2 _right_;

    public ALessThanOrEqualBaseExpression1 ()
    {
    }

    public ALessThanOrEqualBaseExpression1 (
            PExpression2 _left_,
            TLesserOrEqual _lesser_or_equal_,
            PExpression2 _right_
    )
    {
        SetLeft (_left_);
        SetLesserOrEqual (_lesser_or_equal_);
        SetRight (_right_);
    }

    public override Object Clone()
    {
        return new ALessThanOrEqualBaseExpression1 (
            (PExpression2)CloneNode (_left_),
            (TLesserOrEqual)CloneNode (_lesser_or_equal_),
            (PExpression2)CloneNode (_right_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALessThanOrEqualBaseExpression1(this);
    }

    public PExpression2 GetLeft ()
    {
        return _left_;
    }

    public void SetLeft (PExpression2 node)
    {
        if(_left_ != null)
        {
            _left_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_ = node;
    }
    public TLesserOrEqual GetLesserOrEqual ()
    {
        return _lesser_or_equal_;
    }

    public void SetLesserOrEqual (TLesserOrEqual node)
    {
        if(_lesser_or_equal_ != null)
        {
            _lesser_or_equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lesser_or_equal_ = node;
    }
    public PExpression2 GetRight ()
    {
        return _right_;
    }

    public void SetRight (PExpression2 node)
    {
        if(_right_ != null)
        {
            _right_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_left_)
            + ToString (_lesser_or_equal_)
            + ToString (_right_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _left_ == child )
        {
            _left_ = null;
            return;
        }
        if ( _lesser_or_equal_ == child )
        {
            _lesser_or_equal_ = null;
            return;
        }
        if ( _right_ == child )
        {
            _right_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _left_ == oldChild )
        {
            SetLeft ((PExpression2) newChild);
            return;
        }
        if ( _lesser_or_equal_ == oldChild )
        {
            SetLesserOrEqual ((TLesserOrEqual) newChild);
            return;
        }
        if ( _right_ == oldChild )
        {
            SetRight ((PExpression2) newChild);
            return;
        }
    }

}
public sealed class AGreaterThanOrEqualBaseExpression1 : PExpression1
{
    private PExpression2 _left_;
    private TGreaterOrEqual _greater_or_equal_;
    private PExpression2 _right_;

    public AGreaterThanOrEqualBaseExpression1 ()
    {
    }

    public AGreaterThanOrEqualBaseExpression1 (
            PExpression2 _left_,
            TGreaterOrEqual _greater_or_equal_,
            PExpression2 _right_
    )
    {
        SetLeft (_left_);
        SetGreaterOrEqual (_greater_or_equal_);
        SetRight (_right_);
    }

    public override Object Clone()
    {
        return new AGreaterThanOrEqualBaseExpression1 (
            (PExpression2)CloneNode (_left_),
            (TGreaterOrEqual)CloneNode (_greater_or_equal_),
            (PExpression2)CloneNode (_right_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGreaterThanOrEqualBaseExpression1(this);
    }

    public PExpression2 GetLeft ()
    {
        return _left_;
    }

    public void SetLeft (PExpression2 node)
    {
        if(_left_ != null)
        {
            _left_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_ = node;
    }
    public TGreaterOrEqual GetGreaterOrEqual ()
    {
        return _greater_or_equal_;
    }

    public void SetGreaterOrEqual (TGreaterOrEqual node)
    {
        if(_greater_or_equal_ != null)
        {
            _greater_or_equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _greater_or_equal_ = node;
    }
    public PExpression2 GetRight ()
    {
        return _right_;
    }

    public void SetRight (PExpression2 node)
    {
        if(_right_ != null)
        {
            _right_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_left_)
            + ToString (_greater_or_equal_)
            + ToString (_right_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _left_ == child )
        {
            _left_ = null;
            return;
        }
        if ( _greater_or_equal_ == child )
        {
            _greater_or_equal_ = null;
            return;
        }
        if ( _right_ == child )
        {
            _right_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _left_ == oldChild )
        {
            SetLeft ((PExpression2) newChild);
            return;
        }
        if ( _greater_or_equal_ == oldChild )
        {
            SetGreaterOrEqual ((TGreaterOrEqual) newChild);
            return;
        }
        if ( _right_ == oldChild )
        {
            SetRight ((PExpression2) newChild);
            return;
        }
    }

}
public sealed class AEquivalentBaseExpression1 : PExpression1
{
    private PExpression2 _left_;
    private TEquivalent _equivalent_;
    private PExpression2 _right_;

    public AEquivalentBaseExpression1 ()
    {
    }

    public AEquivalentBaseExpression1 (
            PExpression2 _left_,
            TEquivalent _equivalent_,
            PExpression2 _right_
    )
    {
        SetLeft (_left_);
        SetEquivalent (_equivalent_);
        SetRight (_right_);
    }

    public override Object Clone()
    {
        return new AEquivalentBaseExpression1 (
            (PExpression2)CloneNode (_left_),
            (TEquivalent)CloneNode (_equivalent_),
            (PExpression2)CloneNode (_right_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEquivalentBaseExpression1(this);
    }

    public PExpression2 GetLeft ()
    {
        return _left_;
    }

    public void SetLeft (PExpression2 node)
    {
        if(_left_ != null)
        {
            _left_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_ = node;
    }
    public TEquivalent GetEquivalent ()
    {
        return _equivalent_;
    }

    public void SetEquivalent (TEquivalent node)
    {
        if(_equivalent_ != null)
        {
            _equivalent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equivalent_ = node;
    }
    public PExpression2 GetRight ()
    {
        return _right_;
    }

    public void SetRight (PExpression2 node)
    {
        if(_right_ != null)
        {
            _right_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_left_)
            + ToString (_equivalent_)
            + ToString (_right_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _left_ == child )
        {
            _left_ = null;
            return;
        }
        if ( _equivalent_ == child )
        {
            _equivalent_ = null;
            return;
        }
        if ( _right_ == child )
        {
            _right_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _left_ == oldChild )
        {
            SetLeft ((PExpression2) newChild);
            return;
        }
        if ( _equivalent_ == oldChild )
        {
            SetEquivalent ((TEquivalent) newChild);
            return;
        }
        if ( _right_ == oldChild )
        {
            SetRight ((PExpression2) newChild);
            return;
        }
    }

}
public sealed class AComparisonNextExpression1 : PExpression1
{
    private PExpression2 _expression2_;

    public AComparisonNextExpression1 ()
    {
    }

    public AComparisonNextExpression1 (
            PExpression2 _expression2_
    )
    {
        SetExpression2 (_expression2_);
    }

    public override Object Clone()
    {
        return new AComparisonNextExpression1 (
            (PExpression2)CloneNode (_expression2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAComparisonNextExpression1(this);
    }

    public PExpression2 GetExpression2 ()
    {
        return _expression2_;
    }

    public void SetExpression2 (PExpression2 node)
    {
        if(_expression2_ != null)
        {
            _expression2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression2_ == child )
        {
            _expression2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression2_ == oldChild )
        {
            SetExpression2 ((PExpression2) newChild);
            return;
        }
    }

}
public sealed class AAdditionBaseExpression2 : PExpression2
{
    private PExpression2 _expression2_;
    private TAddition _addition_;
    private PExpression3 _expression3_;

    public AAdditionBaseExpression2 ()
    {
    }

    public AAdditionBaseExpression2 (
            PExpression2 _expression2_,
            TAddition _addition_,
            PExpression3 _expression3_
    )
    {
        SetExpression2 (_expression2_);
        SetAddition (_addition_);
        SetExpression3 (_expression3_);
    }

    public override Object Clone()
    {
        return new AAdditionBaseExpression2 (
            (PExpression2)CloneNode (_expression2_),
            (TAddition)CloneNode (_addition_),
            (PExpression3)CloneNode (_expression3_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAdditionBaseExpression2(this);
    }

    public PExpression2 GetExpression2 ()
    {
        return _expression2_;
    }

    public void SetExpression2 (PExpression2 node)
    {
        if(_expression2_ != null)
        {
            _expression2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression2_ = node;
    }
    public TAddition GetAddition ()
    {
        return _addition_;
    }

    public void SetAddition (TAddition node)
    {
        if(_addition_ != null)
        {
            _addition_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _addition_ = node;
    }
    public PExpression3 GetExpression3 ()
    {
        return _expression3_;
    }

    public void SetExpression3 (PExpression3 node)
    {
        if(_expression3_ != null)
        {
            _expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression3_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression2_)
            + ToString (_addition_)
            + ToString (_expression3_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression2_ == child )
        {
            _expression2_ = null;
            return;
        }
        if ( _addition_ == child )
        {
            _addition_ = null;
            return;
        }
        if ( _expression3_ == child )
        {
            _expression3_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression2_ == oldChild )
        {
            SetExpression2 ((PExpression2) newChild);
            return;
        }
        if ( _addition_ == oldChild )
        {
            SetAddition ((TAddition) newChild);
            return;
        }
        if ( _expression3_ == oldChild )
        {
            SetExpression3 ((PExpression3) newChild);
            return;
        }
    }

}
public sealed class ASubtractionBaseExpression2 : PExpression2
{
    private PExpression2 _expression2_;
    private TSubtraction _subtraction_;
    private PExpression3 _expression3_;

    public ASubtractionBaseExpression2 ()
    {
    }

    public ASubtractionBaseExpression2 (
            PExpression2 _expression2_,
            TSubtraction _subtraction_,
            PExpression3 _expression3_
    )
    {
        SetExpression2 (_expression2_);
        SetSubtraction (_subtraction_);
        SetExpression3 (_expression3_);
    }

    public override Object Clone()
    {
        return new ASubtractionBaseExpression2 (
            (PExpression2)CloneNode (_expression2_),
            (TSubtraction)CloneNode (_subtraction_),
            (PExpression3)CloneNode (_expression3_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASubtractionBaseExpression2(this);
    }

    public PExpression2 GetExpression2 ()
    {
        return _expression2_;
    }

    public void SetExpression2 (PExpression2 node)
    {
        if(_expression2_ != null)
        {
            _expression2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression2_ = node;
    }
    public TSubtraction GetSubtraction ()
    {
        return _subtraction_;
    }

    public void SetSubtraction (TSubtraction node)
    {
        if(_subtraction_ != null)
        {
            _subtraction_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _subtraction_ = node;
    }
    public PExpression3 GetExpression3 ()
    {
        return _expression3_;
    }

    public void SetExpression3 (PExpression3 node)
    {
        if(_expression3_ != null)
        {
            _expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression3_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression2_)
            + ToString (_subtraction_)
            + ToString (_expression3_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression2_ == child )
        {
            _expression2_ = null;
            return;
        }
        if ( _subtraction_ == child )
        {
            _subtraction_ = null;
            return;
        }
        if ( _expression3_ == child )
        {
            _expression3_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression2_ == oldChild )
        {
            SetExpression2 ((PExpression2) newChild);
            return;
        }
        if ( _subtraction_ == oldChild )
        {
            SetSubtraction ((TSubtraction) newChild);
            return;
        }
        if ( _expression3_ == oldChild )
        {
            SetExpression3 ((PExpression3) newChild);
            return;
        }
    }

}
public sealed class AArithmaticNextExpression2 : PExpression2
{
    private PExpression3 _expression3_;

    public AArithmaticNextExpression2 ()
    {
    }

    public AArithmaticNextExpression2 (
            PExpression3 _expression3_
    )
    {
        SetExpression3 (_expression3_);
    }

    public override Object Clone()
    {
        return new AArithmaticNextExpression2 (
            (PExpression3)CloneNode (_expression3_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAArithmaticNextExpression2(this);
    }

    public PExpression3 GetExpression3 ()
    {
        return _expression3_;
    }

    public void SetExpression3 (PExpression3 node)
    {
        if(_expression3_ != null)
        {
            _expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression3_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression3_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression3_ == child )
        {
            _expression3_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression3_ == oldChild )
        {
            SetExpression3 ((PExpression3) newChild);
            return;
        }
    }

}
public sealed class AMultiplicationBaseExpression3 : PExpression3
{
    private PExpression3 _expression3_;
    private TMultiplication _multiplication_;
    private PExpression4 _expression4_;

    public AMultiplicationBaseExpression3 ()
    {
    }

    public AMultiplicationBaseExpression3 (
            PExpression3 _expression3_,
            TMultiplication _multiplication_,
            PExpression4 _expression4_
    )
    {
        SetExpression3 (_expression3_);
        SetMultiplication (_multiplication_);
        SetExpression4 (_expression4_);
    }

    public override Object Clone()
    {
        return new AMultiplicationBaseExpression3 (
            (PExpression3)CloneNode (_expression3_),
            (TMultiplication)CloneNode (_multiplication_),
            (PExpression4)CloneNode (_expression4_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultiplicationBaseExpression3(this);
    }

    public PExpression3 GetExpression3 ()
    {
        return _expression3_;
    }

    public void SetExpression3 (PExpression3 node)
    {
        if(_expression3_ != null)
        {
            _expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression3_ = node;
    }
    public TMultiplication GetMultiplication ()
    {
        return _multiplication_;
    }

    public void SetMultiplication (TMultiplication node)
    {
        if(_multiplication_ != null)
        {
            _multiplication_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _multiplication_ = node;
    }
    public PExpression4 GetExpression4 ()
    {
        return _expression4_;
    }

    public void SetExpression4 (PExpression4 node)
    {
        if(_expression4_ != null)
        {
            _expression4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression4_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression3_)
            + ToString (_multiplication_)
            + ToString (_expression4_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression3_ == child )
        {
            _expression3_ = null;
            return;
        }
        if ( _multiplication_ == child )
        {
            _multiplication_ = null;
            return;
        }
        if ( _expression4_ == child )
        {
            _expression4_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression3_ == oldChild )
        {
            SetExpression3 ((PExpression3) newChild);
            return;
        }
        if ( _multiplication_ == oldChild )
        {
            SetMultiplication ((TMultiplication) newChild);
            return;
        }
        if ( _expression4_ == oldChild )
        {
            SetExpression4 ((PExpression4) newChild);
            return;
        }
    }

}
public sealed class ADivisionBaseExpression3 : PExpression3
{
    private PExpression3 _expression3_;
    private TDivision _division_;
    private PExpression4 _expression4_;

    public ADivisionBaseExpression3 ()
    {
    }

    public ADivisionBaseExpression3 (
            PExpression3 _expression3_,
            TDivision _division_,
            PExpression4 _expression4_
    )
    {
        SetExpression3 (_expression3_);
        SetDivision (_division_);
        SetExpression4 (_expression4_);
    }

    public override Object Clone()
    {
        return new ADivisionBaseExpression3 (
            (PExpression3)CloneNode (_expression3_),
            (TDivision)CloneNode (_division_),
            (PExpression4)CloneNode (_expression4_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADivisionBaseExpression3(this);
    }

    public PExpression3 GetExpression3 ()
    {
        return _expression3_;
    }

    public void SetExpression3 (PExpression3 node)
    {
        if(_expression3_ != null)
        {
            _expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression3_ = node;
    }
    public TDivision GetDivision ()
    {
        return _division_;
    }

    public void SetDivision (TDivision node)
    {
        if(_division_ != null)
        {
            _division_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _division_ = node;
    }
    public PExpression4 GetExpression4 ()
    {
        return _expression4_;
    }

    public void SetExpression4 (PExpression4 node)
    {
        if(_expression4_ != null)
        {
            _expression4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression4_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression3_)
            + ToString (_division_)
            + ToString (_expression4_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression3_ == child )
        {
            _expression3_ = null;
            return;
        }
        if ( _division_ == child )
        {
            _division_ = null;
            return;
        }
        if ( _expression4_ == child )
        {
            _expression4_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression3_ == oldChild )
        {
            SetExpression3 ((PExpression3) newChild);
            return;
        }
        if ( _division_ == oldChild )
        {
            SetDivision ((TDivision) newChild);
            return;
        }
        if ( _expression4_ == oldChild )
        {
            SetExpression4 ((PExpression4) newChild);
            return;
        }
    }

}
public sealed class AAlgebraNextExpression3 : PExpression3
{
    private PExpression4 _expression4_;

    public AAlgebraNextExpression3 ()
    {
    }

    public AAlgebraNextExpression3 (
            PExpression4 _expression4_
    )
    {
        SetExpression4 (_expression4_);
    }

    public override Object Clone()
    {
        return new AAlgebraNextExpression3 (
            (PExpression4)CloneNode (_expression4_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAlgebraNextExpression3(this);
    }

    public PExpression4 GetExpression4 ()
    {
        return _expression4_;
    }

    public void SetExpression4 (PExpression4 node)
    {
        if(_expression4_ != null)
        {
            _expression4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression4_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression4_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression4_ == child )
        {
            _expression4_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression4_ == oldChild )
        {
            SetExpression4 ((PExpression4) newChild);
            return;
        }
    }

}
public sealed class AExponentBaseExpression4 : PExpression4
{
    private PExpression4 _expression4_;
    private TExponent _exponent_;
    private PExpression5 _expression5_;

    public AExponentBaseExpression4 ()
    {
    }

    public AExponentBaseExpression4 (
            PExpression4 _expression4_,
            TExponent _exponent_,
            PExpression5 _expression5_
    )
    {
        SetExpression4 (_expression4_);
        SetExponent (_exponent_);
        SetExpression5 (_expression5_);
    }

    public override Object Clone()
    {
        return new AExponentBaseExpression4 (
            (PExpression4)CloneNode (_expression4_),
            (TExponent)CloneNode (_exponent_),
            (PExpression5)CloneNode (_expression5_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAExponentBaseExpression4(this);
    }

    public PExpression4 GetExpression4 ()
    {
        return _expression4_;
    }

    public void SetExpression4 (PExpression4 node)
    {
        if(_expression4_ != null)
        {
            _expression4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression4_ = node;
    }
    public TExponent GetExponent ()
    {
        return _exponent_;
    }

    public void SetExponent (TExponent node)
    {
        if(_exponent_ != null)
        {
            _exponent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exponent_ = node;
    }
    public PExpression5 GetExpression5 ()
    {
        return _expression5_;
    }

    public void SetExpression5 (PExpression5 node)
    {
        if(_expression5_ != null)
        {
            _expression5_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression5_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression4_)
            + ToString (_exponent_)
            + ToString (_expression5_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression4_ == child )
        {
            _expression4_ = null;
            return;
        }
        if ( _exponent_ == child )
        {
            _exponent_ = null;
            return;
        }
        if ( _expression5_ == child )
        {
            _expression5_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression4_ == oldChild )
        {
            SetExpression4 ((PExpression4) newChild);
            return;
        }
        if ( _exponent_ == oldChild )
        {
            SetExponent ((TExponent) newChild);
            return;
        }
        if ( _expression5_ == oldChild )
        {
            SetExpression5 ((PExpression5) newChild);
            return;
        }
    }

}
public sealed class AExponenetNextExpression4 : PExpression4
{
    private PExpression5 _expression5_;

    public AExponenetNextExpression4 ()
    {
    }

    public AExponenetNextExpression4 (
            PExpression5 _expression5_
    )
    {
        SetExpression5 (_expression5_);
    }

    public override Object Clone()
    {
        return new AExponenetNextExpression4 (
            (PExpression5)CloneNode (_expression5_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAExponenetNextExpression4(this);
    }

    public PExpression5 GetExpression5 ()
    {
        return _expression5_;
    }

    public void SetExpression5 (PExpression5 node)
    {
        if(_expression5_ != null)
        {
            _expression5_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression5_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression5_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression5_ == child )
        {
            _expression5_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression5_ == oldChild )
        {
            SetExpression5 ((PExpression5) newChild);
            return;
        }
    }

}
public sealed class AParenthesisBaseExpression5 : PExpression5
{
    private TLParenthesis _l_parenthesis_;
    private PExpression _expression_;
    private TRParenthesis _r_parenthesis_;

    public AParenthesisBaseExpression5 ()
    {
    }

    public AParenthesisBaseExpression5 (
            TLParenthesis _l_parenthesis_,
            PExpression _expression_,
            TRParenthesis _r_parenthesis_
    )
    {
        SetLParenthesis (_l_parenthesis_);
        SetExpression (_expression_);
        SetRParenthesis (_r_parenthesis_);
    }

    public override Object Clone()
    {
        return new AParenthesisBaseExpression5 (
            (TLParenthesis)CloneNode (_l_parenthesis_),
            (PExpression)CloneNode (_expression_),
            (TRParenthesis)CloneNode (_r_parenthesis_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParenthesisBaseExpression5(this);
    }

    public TLParenthesis GetLParenthesis ()
    {
        return _l_parenthesis_;
    }

    public void SetLParenthesis (TLParenthesis node)
    {
        if(_l_parenthesis_ != null)
        {
            _l_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_parenthesis_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TRParenthesis GetRParenthesis ()
    {
        return _r_parenthesis_;
    }

    public void SetRParenthesis (TRParenthesis node)
    {
        if(_r_parenthesis_ != null)
        {
            _r_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_parenthesis_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_l_parenthesis_)
            + ToString (_expression_)
            + ToString (_r_parenthesis_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _l_parenthesis_ == child )
        {
            _l_parenthesis_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _r_parenthesis_ == child )
        {
            _r_parenthesis_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _l_parenthesis_ == oldChild )
        {
            SetLParenthesis ((TLParenthesis) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _r_parenthesis_ == oldChild )
        {
            SetRParenthesis ((TRParenthesis) newChild);
            return;
        }
    }

}
public sealed class AArrayBaseExpression5 : PExpression5
{
    private TId _id_;
    private TLSqBracket _l_sq_bracket_;
    private PExpression _expression_;
    private TRSqBracket _r_sq_bracket_;

    public AArrayBaseExpression5 ()
    {
    }

    public AArrayBaseExpression5 (
            TId _id_,
            TLSqBracket _l_sq_bracket_,
            PExpression _expression_,
            TRSqBracket _r_sq_bracket_
    )
    {
        SetId (_id_);
        SetLSqBracket (_l_sq_bracket_);
        SetExpression (_expression_);
        SetRSqBracket (_r_sq_bracket_);
    }

    public override Object Clone()
    {
        return new AArrayBaseExpression5 (
            (TId)CloneNode (_id_),
            (TLSqBracket)CloneNode (_l_sq_bracket_),
            (PExpression)CloneNode (_expression_),
            (TRSqBracket)CloneNode (_r_sq_bracket_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAArrayBaseExpression5(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TLSqBracket GetLSqBracket ()
    {
        return _l_sq_bracket_;
    }

    public void SetLSqBracket (TLSqBracket node)
    {
        if(_l_sq_bracket_ != null)
        {
            _l_sq_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_sq_bracket_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TRSqBracket GetRSqBracket ()
    {
        return _r_sq_bracket_;
    }

    public void SetRSqBracket (TRSqBracket node)
    {
        if(_r_sq_bracket_ != null)
        {
            _r_sq_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_sq_bracket_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_l_sq_bracket_)
            + ToString (_expression_)
            + ToString (_r_sq_bracket_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _l_sq_bracket_ == child )
        {
            _l_sq_bracket_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _r_sq_bracket_ == child )
        {
            _r_sq_bracket_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _l_sq_bracket_ == oldChild )
        {
            SetLSqBracket ((TLSqBracket) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _r_sq_bracket_ == oldChild )
        {
            SetRSqBracket ((TRSqBracket) newChild);
            return;
        }
    }

}
public sealed class ARecursiveExpressionVariableExpression5 : PExpression5
{
    private TId _id_;

    public ARecursiveExpressionVariableExpression5 ()
    {
    }

    public ARecursiveExpressionVariableExpression5 (
            TId _id_
    )
    {
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new ARecursiveExpressionVariableExpression5 (
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseARecursiveExpressionVariableExpression5(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

}
public sealed class ARecursiveExpressionIntExpression5 : PExpression5
{
    private TInteger _integer_;

    public ARecursiveExpressionIntExpression5 ()
    {
    }

    public ARecursiveExpressionIntExpression5 (
            TInteger _integer_
    )
    {
        SetInteger (_integer_);
    }

    public override Object Clone()
    {
        return new ARecursiveExpressionIntExpression5 (
            (TInteger)CloneNode (_integer_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseARecursiveExpressionIntExpression5(this);
    }

    public TInteger GetInteger ()
    {
        return _integer_;
    }

    public void SetInteger (TInteger node)
    {
        if(_integer_ != null)
        {
            _integer_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _integer_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_integer_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _integer_ == child )
        {
            _integer_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _integer_ == oldChild )
        {
            SetInteger ((TInteger) newChild);
            return;
        }
    }

}
public sealed class ARecursiveExpressionFloatExpression5 : PExpression5
{
    private TFloat _float_;

    public ARecursiveExpressionFloatExpression5 ()
    {
    }

    public ARecursiveExpressionFloatExpression5 (
            TFloat _float_
    )
    {
        SetFloat (_float_);
    }

    public override Object Clone()
    {
        return new ARecursiveExpressionFloatExpression5 (
            (TFloat)CloneNode (_float_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseARecursiveExpressionFloatExpression5(this);
    }

    public TFloat GetFloat ()
    {
        return _float_;
    }

    public void SetFloat (TFloat node)
    {
        if(_float_ != null)
        {
            _float_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _float_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_float_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _float_ == child )
        {
            _float_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _float_ == oldChild )
        {
            SetFloat ((TFloat) newChild);
            return;
        }
    }

}
public sealed class ARecursiveExpressionStringExpression5 : PExpression5
{
    private TString _string_;

    public ARecursiveExpressionStringExpression5 ()
    {
    }

    public ARecursiveExpressionStringExpression5 (
            TString _string_
    )
    {
        SetString (_string_);
    }

    public override Object Clone()
    {
        return new ARecursiveExpressionStringExpression5 (
            (TString)CloneNode (_string_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseARecursiveExpressionStringExpression5(this);
    }

    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_string_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
    }

}

public sealed class Start : Node
{
    private PProgram _base_;
    private EOF _eof_;

    public Start()
    {
    }

    public Start(
        PProgram _base_,
        EOF _eof_)
    {
        SetPProgram(_base_);
        SetEOF(_eof_);
    }

    public override Object Clone()
    {
        return new Start(
            (PProgram) CloneNode(_base_),
            (EOF) CloneNode(_eof_));
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseStart(this);
    }

    public PProgram GetPProgram()
    {
        return _base_;
    }
    public void SetPProgram(PProgram node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public EOF GetEOF()
    {
        return _eof_;
    }
    public void SetEOF(EOF node)
    {
        if(_eof_ != null)
        {
            _eof_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eof_ = node;
    }

    internal override void RemoveChild(Node child)
    {
        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_eof_ == child)
        {
            _eof_ = null;
            return;
        }
    }
    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if(_base_ == oldChild)
        {
            SetPProgram((PProgram) newChild);
            return;
        }

        if(_eof_ == oldChild)
        {
            SetEOF((EOF) newChild);
            return;
        }
    }

    public override string ToString()
    {
        return "" +
            ToString(_base_) +
            ToString(_eof_);
    }
}
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;
using System.IO;
using comp5210.node;
using comp5210.lexer;
using comp5210.analysis;

namespace comp5210.parser {

public class ParserException : ApplicationException
{
    Token token;

    public ParserException(Token token, String  message) : base(message)
    {
        this.token = token;
    }

    public Token Token
    {
      get { return token; }
    }
}

internal class State
{
    internal int state;
    internal ArrayList nodes;

    internal State(int state, ArrayList nodes)
    {
        this.state = state;
        this.nodes = nodes;
    }
}

internal class TokenIndex : AnalysisAdapter
{
    internal int index;

    public override void CaseTShout(TShout node)
    {
        index = 0;
    }

    public override void CaseTClass(TClass node)
    {
        index = 1;
    }

    public override void CaseTPublic(TPublic node)
    {
        index = 2;
    }

    public override void CaseTPrivate(TPrivate node)
    {
        index = 3;
    }

    public override void CaseTReturn(TReturn node)
    {
        index = 4;
    }

    public override void CaseTMainProgram(TMainProgram node)
    {
        index = 5;
    }

    public override void CaseTLParenthesis(TLParenthesis node)
    {
        index = 6;
    }

    public override void CaseTRParenthesis(TRParenthesis node)
    {
        index = 7;
    }

    public override void CaseTLSqBracket(TLSqBracket node)
    {
        index = 8;
    }

    public override void CaseTRSqBracket(TRSqBracket node)
    {
        index = 9;
    }

    public override void CaseTLCuBracket(TLCuBracket node)
    {
        index = 10;
    }

    public override void CaseTRCuBracket(TRCuBracket node)
    {
        index = 11;
    }

    public override void CaseTExponent(TExponent node)
    {
        index = 12;
    }

    public override void CaseTSeperator(TSeperator node)
    {
        index = 13;
    }

    public override void CaseTAddition(TAddition node)
    {
        index = 14;
    }

    public override void CaseTSubtraction(TSubtraction node)
    {
        index = 15;
    }

    public override void CaseTMultiplication(TMultiplication node)
    {
        index = 16;
    }

    public override void CaseTDivision(TDivision node)
    {
        index = 17;
    }

    public override void CaseTAndSign(TAndSign node)
    {
        index = 18;
    }

    public override void CaseTOrSign(TOrSign node)
    {
        index = 19;
    }

    public override void CaseTNotSign(TNotSign node)
    {
        index = 20;
    }

    public override void CaseTEquivalent(TEquivalent node)
    {
        index = 21;
    }

    public override void CaseTGreaterOrEqual(TGreaterOrEqual node)
    {
        index = 22;
    }

    public override void CaseTLesserOrEqual(TLesserOrEqual node)
    {
        index = 23;
    }

    public override void CaseTGreater(TGreater node)
    {
        index = 24;
    }

    public override void CaseTLess(TLess node)
    {
        index = 25;
    }

    public override void CaseTEqual(TEqual node)
    {
        index = 26;
    }

    public override void CaseTSemicolon(TSemicolon node)
    {
        index = 27;
    }

    public override void CaseTConstToken(TConstToken node)
    {
        index = 28;
    }

    public override void CaseTFloat(TFloat node)
    {
        index = 29;
    }

    public override void CaseTInteger(TInteger node)
    {
        index = 30;
    }

    public override void CaseTString(TString node)
    {
        index = 31;
    }

    public override void CaseTIf(TIf node)
    {
        index = 32;
    }

    public override void CaseTElse(TElse node)
    {
        index = 33;
    }

    public override void CaseTWhile(TWhile node)
    {
        index = 34;
    }

    public override void CaseTId(TId node)
    {
        index = 35;
    }

    public override void CaseEOF(EOF node)
    {
        index = 36;
    }
}

public class Parser
{
    private Analysis ignoredTokens = new AnalysisAdapter();
    public Analysis IgnoredTokens
    {
      get { return ignoredTokens; }
    }

    protected ArrayList nodeList;

    private Lexer lexer;
    private Stack stack = new Stack();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private TokenIndex converter = new TokenIndex();
    private int[] action = new int[2];

    private const int SHIFT = 0;
    private const int REDUCE = 1;
    private const int ACCEPT = 2;
    private const int ERROR = 3;

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;
    }

    private int GoTo(int index)
    {
        int state = State();
        int low = 1;
        int high = gotoTable[index].Length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void Push(int numstate, ArrayList listNode)
    {
        this.nodeList = listNode;

        stack.Push(new State(numstate, this.nodeList));
    }

    private int State()
    {
        State s = (State) stack.Peek();
        return s.state;
    }

    private ArrayList Pop()
    {
        return (ArrayList) ((State) stack.Pop()).nodes;
    }

    private int Index(Switchable token)
    {
        converter.index = -1;
        token.Apply(converter);
        return converter.index;
    }

    public Start Parse()
    {
        Push(0, null);

        IList ign = null;
        while(true)
        {
            while(Index(lexer.Peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedList(NodeCast.Instance);
                }

                ign.Add(lexer.Next());
            }

            if(ign != null)
            {
                ignoredTokens.SetIn(lexer.Peek(), ign);
                ign = null;
            }

            last_pos = lexer.Peek().Pos;
            last_line = lexer.Peek().Line;
            last_token = lexer.Peek();

            int index = Index(lexer.Peek());
            action[0] = actionTable[State()][0][1];
            action[1] = actionTable[State()][0][2];

            int low = 1;
            int high = actionTable[State()].Length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[State()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[State()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[State()][middle][1];
                    action[1] = actionTable[State()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
        {
            ArrayList list = new ArrayList();
            list.Add(lexer.Next());
                        Push(action[1], list);
                        last_shift = action[1];
                    }
        break;
                case REDUCE:
                    switch(action[1])
                    {
                    case 0:
        {
      ArrayList list = New0();
      Push(GoTo(0), list);
        }
        break;
                    case 1:
        {
      ArrayList list = New1();
      Push(GoTo(1), list);
        }
        break;
                    case 2:
        {
      ArrayList list = New2();
      Push(GoTo(1), list);
        }
        break;
                    case 3:
        {
      ArrayList list = New3();
      Push(GoTo(1), list);
        }
        break;
                    case 4:
        {
      ArrayList list = New4();
      Push(GoTo(1), list);
        }
        break;
                    case 5:
        {
      ArrayList list = New5();
      Push(GoTo(1), list);
        }
        break;
                    case 6:
        {
      ArrayList list = New6();
      Push(GoTo(1), list);
        }
        break;
                    case 7:
        {
      ArrayList list = New7();
      Push(GoTo(1), list);
        }
        break;
                    case 8:
        {
      ArrayList list = New8();
      Push(GoTo(1), list);
        }
        break;
                    case 9:
        {
      ArrayList list = New9();
      Push(GoTo(1), list);
        }
        break;
                    case 10:
        {
      ArrayList list = New10();
      Push(GoTo(2), list);
        }
        break;
                    case 11:
        {
      ArrayList list = New11();
      Push(GoTo(2), list);
        }
        break;
                    case 12:
        {
      ArrayList list = New12();
      Push(GoTo(2), list);
        }
        break;
                    case 13:
        {
      ArrayList list = New13();
      Push(GoTo(2), list);
        }
        break;
                    case 14:
        {
      ArrayList list = New14();
      Push(GoTo(2), list);
        }
        break;
                    case 15:
        {
      ArrayList list = New15();
      Push(GoTo(2), list);
        }
        break;
                    case 16:
        {
      ArrayList list = New16();
      Push(GoTo(3), list);
        }
        break;
                    case 17:
        {
      ArrayList list = New17();
      Push(GoTo(4), list);
        }
        break;
                    case 18:
        {
      ArrayList list = New18();
      Push(GoTo(4), list);
        }
        break;
                    case 19:
        {
      ArrayList list = New19();
      Push(GoTo(5), list);
        }
        break;
                    case 20:
        {
      ArrayList list = New20();
      Push(GoTo(5), list);
        }
        break;
                    case 21:
        {
      ArrayList list = New21();
      Push(GoTo(6), list);
        }
        break;
                    case 22:
        {
      ArrayList list = New22();
      Push(GoTo(7), list);
        }
        break;
                    case 23:
        {
      ArrayList list = New23();
      Push(GoTo(8), list);
        }
        break;
                    case 24:
        {
      ArrayList list = New24();
      Push(GoTo(9), list);
        }
        break;
                    case 25:
        {
      ArrayList list = New25();
      Push(GoTo(10), list);
        }
        break;
                    case 26:
        {
      ArrayList list = New26();
      Push(GoTo(10), list);
        }
        break;
                    case 27:
        {
      ArrayList list = New27();
      Push(GoTo(11), list);
        }
        break;
                    case 28:
        {
      ArrayList list = New28();
      Push(GoTo(12), list);
        }
        break;
                    case 29:
        {
      ArrayList list = New29();
      Push(GoTo(12), list);
        }
        break;
                    case 30:
        {
      ArrayList list = New30();
      Push(GoTo(12), list);
        }
        break;
                    case 31:
        {
      ArrayList list = New31();
      Push(GoTo(12), list);
        }
        break;
                    case 32:
        {
      ArrayList list = New32();
      Push(GoTo(13), list);
        }
        break;
                    case 33:
        {
      ArrayList list = New33();
      Push(GoTo(13), list);
        }
        break;
                    case 34:
        {
      ArrayList list = New34();
      Push(GoTo(13), list);
        }
        break;
                    case 35:
        {
      ArrayList list = New35();
      Push(GoTo(13), list);
        }
        break;
                    case 36:
        {
      ArrayList list = New36();
      Push(GoTo(13), list);
        }
        break;
                    case 37:
        {
      ArrayList list = New37();
      Push(GoTo(13), list);
        }
        break;
                    case 38:
        {
      ArrayList list = New38();
      Push(GoTo(14), list);
        }
        break;
                    case 39:
        {
      ArrayList list = New39();
      Push(GoTo(14), list);
        }
        break;
                    case 40:
        {
      ArrayList list = New40();
      Push(GoTo(14), list);
        }
        break;
                    case 41:
        {
      ArrayList list = New41();
      Push(GoTo(15), list);
        }
        break;
                    case 42:
        {
      ArrayList list = New42();
      Push(GoTo(15), list);
        }
        break;
                    case 43:
        {
      ArrayList list = New43();
      Push(GoTo(15), list);
        }
        break;
                    case 44:
        {
      ArrayList list = New44();
      Push(GoTo(16), list);
        }
        break;
                    case 45:
        {
      ArrayList list = New45();
      Push(GoTo(16), list);
        }
        break;
                    case 46:
        {
      ArrayList list = New46();
      Push(GoTo(17), list);
        }
        break;
                    case 47:
        {
      ArrayList list = New47();
      Push(GoTo(17), list);
        }
        break;
                    case 48:
        {
      ArrayList list = New48();
      Push(GoTo(17), list);
        }
        break;
                    case 49:
        {
      ArrayList list = New49();
      Push(GoTo(17), list);
        }
        break;
                    case 50:
        {
      ArrayList list = New50();
      Push(GoTo(17), list);
        }
        break;
                    case 51:
        {
      ArrayList list = New51();
      Push(GoTo(17), list);
        }
        break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.Next();
                        PProgram node1 = (PProgram) ((ArrayList)Pop())[0];
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }

    ArrayList New0()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TMainProgram tmainprogramNode2 = (TMainProgram)nodeArrayList1[0];
        TLParenthesis tlparenthesisNode3 = (TLParenthesis)nodeArrayList2[0];
        TRParenthesis trparenthesisNode4 = (TRParenthesis)nodeArrayList3[0];
        TLCuBracket tlcubracketNode5 = (TLCuBracket)nodeArrayList4[0];
        PBody pbodyNode6 = (PBody)nodeArrayList5[0];
        TRCuBracket trcubracketNode7 = (TRCuBracket)nodeArrayList6[0];
        AProgram pprogramNode1 = new AProgram (
              tmainprogramNode2,
              tlparenthesisNode3,
              trparenthesisNode4,
              tlcubracketNode5,
              pbodyNode6,
              trcubracketNode7
        );
        nodeList.Add(pprogramNode1);
        return nodeList;
    }
    ArrayList New1()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PConstant pconstantNode2 = (PConstant)nodeArrayList1[0];
        PBody pbodyNode3 = (PBody)nodeArrayList2[0];
        AConstantSideBody pbodyNode1 = new AConstantSideBody (
              pconstantNode2,
              pbodyNode3
        );
        nodeList.Add(pbodyNode1);
        return nodeList;
    }
    ArrayList New2()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PIfStatement pifstatementNode2 = (PIfStatement)nodeArrayList1[0];
        PBody pbodyNode3 = (PBody)nodeArrayList2[0];
        AIfSideBody pbodyNode1 = new AIfSideBody (
              pifstatementNode2,
              pbodyNode3
        );
        nodeList.Add(pbodyNode1);
        return nodeList;
    }
    ArrayList New3()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PWhileStatement pwhilestatementNode2 = (PWhileStatement)nodeArrayList1[0];
        PBody pbodyNode3 = (PBody)nodeArrayList2[0];
        AWhileSideBody pbodyNode1 = new AWhileSideBody (
              pwhilestatementNode2,
              pbodyNode3
        );
        nodeList.Add(pbodyNode1);
        return nodeList;
    }
    ArrayList New4()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpressionMain pexpressionmainNode2 = (PExpressionMain)nodeArrayList1[0];
        PBody pbodyNode3 = (PBody)nodeArrayList2[0];
        AExpressionSideBody pbodyNode1 = new AExpressionSideBody (
              pexpressionmainNode2,
              pbodyNode3
        );
        nodeList.Add(pbodyNode1);
        return nodeList;
    }
    ArrayList New5()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PVariableDeclaration pvariabledeclarationNode2 = (PVariableDeclaration)nodeArrayList1[0];
        PBody pbodyNode3 = (PBody)nodeArrayList2[0];
        AVariableSideBody pbodyNode1 = new AVariableSideBody (
              pvariabledeclarationNode2,
              pbodyNode3
        );
        nodeList.Add(pbodyNode1);
        return nodeList;
    }
    ArrayList New6()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PProcedureCall pprocedurecallNode2 = (PProcedureCall)nodeArrayList1[0];
        PBody pbodyNode3 = (PBody)nodeArrayList2[0];
        AProcedureCallSideBody pbodyNode1 = new AProcedureCallSideBody (
              pprocedurecallNode2,
              pbodyNode3
        );
        nodeList.Add(pbodyNode1);
        return nodeList;
    }
    ArrayList New7()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PProcedureDeclaration pproceduredeclarationNode2 = (PProcedureDeclaration)nodeArrayList1[0];
        PBody pbodyNode3 = (PBody)nodeArrayList2[0];
        AProcedureSideBody pbodyNode1 = new AProcedureSideBody (
              pproceduredeclarationNode2,
              pbodyNode3
        );
        nodeList.Add(pbodyNode1);
        return nodeList;
    }
    ArrayList New8()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PAssignment passignmentNode2 = (PAssignment)nodeArrayList1[0];
        PBody pbodyNode3 = (PBody)nodeArrayList2[0];
        AAssignmentSideBody pbodyNode1 = new AAssignmentSideBody (
              passignmentNode2,
              pbodyNode3
        );
        nodeList.Add(pbodyNode1);
        return nodeList;
    }
    ArrayList New9()
    {
        ArrayList nodeList = new ArrayList();
        AEmptyBodyBody pbodyNode1 = new AEmptyBodyBody (
        );
        nodeList.Add(pbodyNode1);
        return nodeList;
    }
    ArrayList New10()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PIfStatement pifstatementNode2 = (PIfStatement)nodeArrayList1[0];
        PBodyLesser pbodylesserNode3 = (PBodyLesser)nodeArrayList2[0];
        AIfSideBodyLesser pbodylesserNode1 = new AIfSideBodyLesser (
              pifstatementNode2,
              pbodylesserNode3
        );
        nodeList.Add(pbodylesserNode1);
        return nodeList;
    }
    ArrayList New11()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PWhileStatement pwhilestatementNode2 = (PWhileStatement)nodeArrayList1[0];
        PBodyLesser pbodylesserNode3 = (PBodyLesser)nodeArrayList2[0];
        AWhileSideBodyLesser pbodylesserNode1 = new AWhileSideBodyLesser (
              pwhilestatementNode2,
              pbodylesserNode3
        );
        nodeList.Add(pbodylesserNode1);
        return nodeList;
    }
    ArrayList New12()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpressionMain pexpressionmainNode2 = (PExpressionMain)nodeArrayList1[0];
        PBodyLesser pbodylesserNode3 = (PBodyLesser)nodeArrayList2[0];
        AExpressionSideBodyLesser pbodylesserNode1 = new AExpressionSideBodyLesser (
              pexpressionmainNode2,
              pbodylesserNode3
        );
        nodeList.Add(pbodylesserNode1);
        return nodeList;
    }
    ArrayList New13()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PProcedureCall pprocedurecallNode2 = (PProcedureCall)nodeArrayList1[0];
        PBodyLesser pbodylesserNode3 = (PBodyLesser)nodeArrayList2[0];
        AProcedureCallSideBodyLesser pbodylesserNode1 = new AProcedureCallSideBodyLesser (
              pprocedurecallNode2,
              pbodylesserNode3
        );
        nodeList.Add(pbodylesserNode1);
        return nodeList;
    }
    ArrayList New14()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PAssignment passignmentNode2 = (PAssignment)nodeArrayList1[0];
        PBody pbodyNode3 = (PBody)nodeArrayList2[0];
        AAssignmentSideBodyLesser pbodylesserNode1 = new AAssignmentSideBodyLesser (
              passignmentNode2,
              pbodyNode3
        );
        nodeList.Add(pbodylesserNode1);
        return nodeList;
    }
    ArrayList New15()
    {
        ArrayList nodeList = new ArrayList();
        AEmptyBodyBodyLesser pbodylesserNode1 = new AEmptyBodyBodyLesser (
        );
        nodeList.Add(pbodylesserNode1);
        return nodeList;
    }
    ArrayList New16()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TConstToken tconsttokenNode2 = (TConstToken)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        TSeperator tseperatorNode4 = (TSeperator)nodeArrayList3[0];
        TId tidNode5 = (TId)nodeArrayList4[0];
        TEqual tequalNode6 = (TEqual)nodeArrayList5[0];
        PExpression pexpressionNode7 = (PExpression)nodeArrayList6[0];
        TSemicolon tsemicolonNode8 = (TSemicolon)nodeArrayList7[0];
        AConstantBaseConstant pconstantNode1 = new AConstantBaseConstant (
              tconsttokenNode2,
              tidNode3,
              tseperatorNode4,
              tidNode5,
              tequalNode6,
              pexpressionNode7,
              tsemicolonNode8
        );
        nodeList.Add(pconstantNode1);
        return nodeList;
    }
    ArrayList New17()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TSeperator tseperatorNode3 = (TSeperator)nodeArrayList2[0];
        TId tidNode4 = (TId)nodeArrayList3[0];
        TSemicolon tsemicolonNode5 = (TSemicolon)nodeArrayList4[0];
        AVarBaseVariableDeclaration pvariabledeclarationNode1 = new AVarBaseVariableDeclaration (
              tidNode2,
              tseperatorNode3,
              tidNode4,
              tsemicolonNode5
        );
        nodeList.Add(pvariabledeclarationNode1);
        return nodeList;
    }
    ArrayList New18()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TSeperator tseperatorNode3 = (TSeperator)nodeArrayList2[0];
        TId tidNode4 = (TId)nodeArrayList3[0];
        TLSqBracket tlsqbracketNode5 = (TLSqBracket)nodeArrayList4[0];
        TRSqBracket trsqbracketNode6 = (TRSqBracket)nodeArrayList5[0];
        TSemicolon tsemicolonNode7 = (TSemicolon)nodeArrayList6[0];
        AArrayDeclarationBaseVariableDeclaration pvariabledeclarationNode1 = new AArrayDeclarationBaseVariableDeclaration (
              tidNode2,
              tseperatorNode3,
              tidNode4,
              tlsqbracketNode5,
              trsqbracketNode6,
              tsemicolonNode7
        );
        nodeList.Add(pvariabledeclarationNode1);
        return nodeList;
    }
    ArrayList New19()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TEqual tequalNode3 = (TEqual)nodeArrayList2[0];
        PExpression pexpressionNode4 = (PExpression)nodeArrayList3[0];
        TSemicolon tsemicolonNode5 = (TSemicolon)nodeArrayList4[0];
        AStandardAssignmentAssignment passignmentNode1 = new AStandardAssignmentAssignment (
              tidNode2,
              tequalNode3,
              pexpressionNode4,
              tsemicolonNode5
        );
        nodeList.Add(passignmentNode1);
        return nodeList;
    }
    ArrayList New20()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TLSqBracket tlsqbracketNode3 = (TLSqBracket)nodeArrayList2[0];
        PExpression pexpressionNode4 = (PExpression)nodeArrayList3[0];
        TRSqBracket trsqbracketNode5 = (TRSqBracket)nodeArrayList4[0];
        TEqual tequalNode6 = (TEqual)nodeArrayList5[0];
        PExpression pexpressionNode7 = (PExpression)nodeArrayList6[0];
        TSemicolon tsemicolonNode8 = (TSemicolon)nodeArrayList7[0];
        AArrayAssignmentAssignment passignmentNode1 = new AArrayAssignmentAssignment (
              tidNode2,
              tlsqbracketNode3,
              pexpressionNode4,
              trsqbracketNode5,
              tequalNode6,
              pexpressionNode7,
              tsemicolonNode8
        );
        nodeList.Add(passignmentNode1);
        return nodeList;
    }
    ArrayList New21()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TIf tifNode2 = (TIf)nodeArrayList1[0];
        TLParenthesis tlparenthesisNode3 = (TLParenthesis)nodeArrayList2[0];
        PExpression pexpressionNode4 = (PExpression)nodeArrayList3[0];
        TRParenthesis trparenthesisNode5 = (TRParenthesis)nodeArrayList4[0];
        TLCuBracket tlcubracketNode6 = (TLCuBracket)nodeArrayList5[0];
        PBodyLesser pbodylesserNode7 = (PBodyLesser)nodeArrayList6[0];
        TRCuBracket trcubracketNode8 = (TRCuBracket)nodeArrayList7[0];
        AIfBaseIfStatement pifstatementNode1 = new AIfBaseIfStatement (
              tifNode2,
              tlparenthesisNode3,
              pexpressionNode4,
              trparenthesisNode5,
              tlcubracketNode6,
              pbodylesserNode7,
              trcubracketNode8
        );
        nodeList.Add(pifstatementNode1);
        return nodeList;
    }
    ArrayList New22()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TWhile twhileNode2 = (TWhile)nodeArrayList1[0];
        TLParenthesis tlparenthesisNode3 = (TLParenthesis)nodeArrayList2[0];
        PExpression pexpressionNode4 = (PExpression)nodeArrayList3[0];
        TRParenthesis trparenthesisNode5 = (TRParenthesis)nodeArrayList4[0];
        TLCuBracket tlcubracketNode6 = (TLCuBracket)nodeArrayList5[0];
        PBodyLesser pbodylesserNode7 = (PBodyLesser)nodeArrayList6[0];
        TRCuBracket trcubracketNode8 = (TRCuBracket)nodeArrayList7[0];
        AWhileBaseWhileStatement pwhilestatementNode1 = new AWhileBaseWhileStatement (
              twhileNode2,
              tlparenthesisNode3,
              pexpressionNode4,
              trparenthesisNode5,
              tlcubracketNode6,
              pbodylesserNode7,
              trcubracketNode8
        );
        nodeList.Add(pwhilestatementNode1);
        return nodeList;
    }
    ArrayList New23()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TLParenthesis tlparenthesisNode3 = (TLParenthesis)nodeArrayList2[0];
        PProcedureHelper pprocedurehelperNode4 = (PProcedureHelper)nodeArrayList3[0];
        TRParenthesis trparenthesisNode5 = (TRParenthesis)nodeArrayList4[0];
        TSemicolon tsemicolonNode6 = (TSemicolon)nodeArrayList5[0];
        AProcedureCall pprocedurecallNode1 = new AProcedureCall (
              tidNode2,
              tlparenthesisNode3,
              pprocedurehelperNode4,
              trparenthesisNode5,
              tsemicolonNode6
        );
        nodeList.Add(pprocedurecallNode1);
        return nodeList;
    }
    ArrayList New24()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TLParenthesis tlparenthesisNode3 = (TLParenthesis)nodeArrayList2[0];
        PProcedureHelper pprocedurehelperNode4 = (PProcedureHelper)nodeArrayList3[0];
        TRParenthesis trparenthesisNode5 = (TRParenthesis)nodeArrayList4[0];
        TLCuBracket tlcubracketNode6 = (TLCuBracket)nodeArrayList5[0];
        PBodyLesser pbodylesserNode7 = (PBodyLesser)nodeArrayList6[0];
        TRCuBracket trcubracketNode8 = (TRCuBracket)nodeArrayList7[0];
        AProcedureDeclaration pproceduredeclarationNode1 = new AProcedureDeclaration (
              tidNode2,
              tlparenthesisNode3,
              pprocedurehelperNode4,
              trparenthesisNode5,
              tlcubracketNode6,
              pbodylesserNode7,
              trcubracketNode8
        );
        nodeList.Add(pproceduredeclarationNode1);
        return nodeList;
    }
    ArrayList New25()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PProcedureHelper pprocedurehelperNode2 = (PProcedureHelper)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        TSeperator tseperatorNode4 = (TSeperator)nodeArrayList3[0];
        PExpression pexpressionNode5 = (PExpression)nodeArrayList4[0];
        AProcedureHelperMainProcedureHelper pprocedurehelperNode1 = new AProcedureHelperMainProcedureHelper (
              pprocedurehelperNode2,
              tidNode3,
              tseperatorNode4,
              pexpressionNode5
        );
        nodeList.Add(pprocedurehelperNode1);
        return nodeList;
    }
    ArrayList New26()
    {
        ArrayList nodeList = new ArrayList();
        AProcedureHelperEmptyProcedureHelper pprocedurehelperNode1 = new AProcedureHelperEmptyProcedureHelper (
        );
        nodeList.Add(pprocedurehelperNode1);
        return nodeList;
    }
    ArrayList New27()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression pexpressionNode2 = (PExpression)nodeArrayList1[0];
        TSemicolon tsemicolonNode3 = (TSemicolon)nodeArrayList2[0];
        AExpressionMain pexpressionmainNode1 = new AExpressionMain (
              pexpressionNode2,
              tsemicolonNode3
        );
        nodeList.Add(pexpressionmainNode1);
        return nodeList;
    }
    ArrayList New28()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression pexpressionNode2 = (PExpression)nodeArrayList1[0];
        TAndSign tandsignNode3 = (TAndSign)nodeArrayList2[0];
        PExpression1 pexpression1Node4 = (PExpression1)nodeArrayList3[0];
        AAndBaseExpression pexpressionNode1 = new AAndBaseExpression (
              pexpressionNode2,
              tandsignNode3,
              pexpression1Node4
        );
        nodeList.Add(pexpressionNode1);
        return nodeList;
    }
    ArrayList New29()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression pexpressionNode2 = (PExpression)nodeArrayList1[0];
        TOrSign torsignNode3 = (TOrSign)nodeArrayList2[0];
        PExpression1 pexpression1Node4 = (PExpression1)nodeArrayList3[0];
        AOrBaseExpression pexpressionNode1 = new AOrBaseExpression (
              pexpressionNode2,
              torsignNode3,
              pexpression1Node4
        );
        nodeList.Add(pexpressionNode1);
        return nodeList;
    }
    ArrayList New30()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression pexpressionNode2 = (PExpression)nodeArrayList1[0];
        TNotSign tnotsignNode3 = (TNotSign)nodeArrayList2[0];
        PExpression1 pexpression1Node4 = (PExpression1)nodeArrayList3[0];
        ANotBaseExpression pexpressionNode1 = new ANotBaseExpression (
              pexpressionNode2,
              tnotsignNode3,
              pexpression1Node4
        );
        nodeList.Add(pexpressionNode1);
        return nodeList;
    }
    ArrayList New31()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression1 pexpression1Node2 = (PExpression1)nodeArrayList1[0];
        AAndNextExpression pexpressionNode1 = new AAndNextExpression (
              pexpression1Node2
        );
        nodeList.Add(pexpressionNode1);
        return nodeList;
    }
    ArrayList New32()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression2 pexpression2Node2 = (PExpression2)nodeArrayList1[0];
        TGreater tgreaterNode3 = (TGreater)nodeArrayList2[0];
        PExpression2 pexpression2Node4 = (PExpression2)nodeArrayList3[0];
        AGreaterThanBaseExpression1 pexpression1Node1 = new AGreaterThanBaseExpression1 (
              pexpression2Node2,
              tgreaterNode3,
              pexpression2Node4
        );
        nodeList.Add(pexpression1Node1);
        return nodeList;
    }
    ArrayList New33()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression2 pexpression2Node2 = (PExpression2)nodeArrayList1[0];
        TLess tlessNode3 = (TLess)nodeArrayList2[0];
        PExpression2 pexpression2Node4 = (PExpression2)nodeArrayList3[0];
        ALessThanBaseExpression1 pexpression1Node1 = new ALessThanBaseExpression1 (
              pexpression2Node2,
              tlessNode3,
              pexpression2Node4
        );
        nodeList.Add(pexpression1Node1);
        return nodeList;
    }
    ArrayList New34()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression2 pexpression2Node2 = (PExpression2)nodeArrayList1[0];
        TLesserOrEqual tlesserorequalNode3 = (TLesserOrEqual)nodeArrayList2[0];
        PExpression2 pexpression2Node4 = (PExpression2)nodeArrayList3[0];
        ALessThanOrEqualBaseExpression1 pexpression1Node1 = new ALessThanOrEqualBaseExpression1 (
              pexpression2Node2,
              tlesserorequalNode3,
              pexpression2Node4
        );
        nodeList.Add(pexpression1Node1);
        return nodeList;
    }
    ArrayList New35()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression2 pexpression2Node2 = (PExpression2)nodeArrayList1[0];
        TGreaterOrEqual tgreaterorequalNode3 = (TGreaterOrEqual)nodeArrayList2[0];
        PExpression2 pexpression2Node4 = (PExpression2)nodeArrayList3[0];
        AGreaterThanOrEqualBaseExpression1 pexpression1Node1 = new AGreaterThanOrEqualBaseExpression1 (
              pexpression2Node2,
              tgreaterorequalNode3,
              pexpression2Node4
        );
        nodeList.Add(pexpression1Node1);
        return nodeList;
    }
    ArrayList New36()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression2 pexpression2Node2 = (PExpression2)nodeArrayList1[0];
        TEquivalent tequivalentNode3 = (TEquivalent)nodeArrayList2[0];
        PExpression2 pexpression2Node4 = (PExpression2)nodeArrayList3[0];
        AEquivalentBaseExpression1 pexpression1Node1 = new AEquivalentBaseExpression1 (
              pexpression2Node2,
              tequivalentNode3,
              pexpression2Node4
        );
        nodeList.Add(pexpression1Node1);
        return nodeList;
    }
    ArrayList New37()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression2 pexpression2Node2 = (PExpression2)nodeArrayList1[0];
        AComparisonNextExpression1 pexpression1Node1 = new AComparisonNextExpression1 (
              pexpression2Node2
        );
        nodeList.Add(pexpression1Node1);
        return nodeList;
    }
    ArrayList New38()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression2 pexpression2Node2 = (PExpression2)nodeArrayList1[0];
        TAddition tadditionNode3 = (TAddition)nodeArrayList2[0];
        PExpression3 pexpression3Node4 = (PExpression3)nodeArrayList3[0];
        AAdditionBaseExpression2 pexpression2Node1 = new AAdditionBaseExpression2 (
              pexpression2Node2,
              tadditionNode3,
              pexpression3Node4
        );
        nodeList.Add(pexpression2Node1);
        return nodeList;
    }
    ArrayList New39()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression2 pexpression2Node2 = (PExpression2)nodeArrayList1[0];
        TSubtraction tsubtractionNode3 = (TSubtraction)nodeArrayList2[0];
        PExpression3 pexpression3Node4 = (PExpression3)nodeArrayList3[0];
        ASubtractionBaseExpression2 pexpression2Node1 = new ASubtractionBaseExpression2 (
              pexpression2Node2,
              tsubtractionNode3,
              pexpression3Node4
        );
        nodeList.Add(pexpression2Node1);
        return nodeList;
    }
    ArrayList New40()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression3 pexpression3Node2 = (PExpression3)nodeArrayList1[0];
        AArithmaticNextExpression2 pexpression2Node1 = new AArithmaticNextExpression2 (
              pexpression3Node2
        );
        nodeList.Add(pexpression2Node1);
        return nodeList;
    }
    ArrayList New41()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression3 pexpression3Node2 = (PExpression3)nodeArrayList1[0];
        TMultiplication tmultiplicationNode3 = (TMultiplication)nodeArrayList2[0];
        PExpression4 pexpression4Node4 = (PExpression4)nodeArrayList3[0];
        AMultiplicationBaseExpression3 pexpression3Node1 = new AMultiplicationBaseExpression3 (
              pexpression3Node2,
              tmultiplicationNode3,
              pexpression4Node4
        );
        nodeList.Add(pexpression3Node1);
        return nodeList;
    }
    ArrayList New42()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression3 pexpression3Node2 = (PExpression3)nodeArrayList1[0];
        TDivision tdivisionNode3 = (TDivision)nodeArrayList2[0];
        PExpression4 pexpression4Node4 = (PExpression4)nodeArrayList3[0];
        ADivisionBaseExpression3 pexpression3Node1 = new ADivisionBaseExpression3 (
              pexpression3Node2,
              tdivisionNode3,
              pexpression4Node4
        );
        nodeList.Add(pexpression3Node1);
        return nodeList;
    }
    ArrayList New43()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression4 pexpression4Node2 = (PExpression4)nodeArrayList1[0];
        AAlgebraNextExpression3 pexpression3Node1 = new AAlgebraNextExpression3 (
              pexpression4Node2
        );
        nodeList.Add(pexpression3Node1);
        return nodeList;
    }
    ArrayList New44()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression4 pexpression4Node2 = (PExpression4)nodeArrayList1[0];
        TExponent texponentNode3 = (TExponent)nodeArrayList2[0];
        PExpression5 pexpression5Node4 = (PExpression5)nodeArrayList3[0];
        AExponentBaseExpression4 pexpression4Node1 = new AExponentBaseExpression4 (
              pexpression4Node2,
              texponentNode3,
              pexpression5Node4
        );
        nodeList.Add(pexpression4Node1);
        return nodeList;
    }
    ArrayList New45()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression5 pexpression5Node2 = (PExpression5)nodeArrayList1[0];
        AExponenetNextExpression4 pexpression4Node1 = new AExponenetNextExpression4 (
              pexpression5Node2
        );
        nodeList.Add(pexpression4Node1);
        return nodeList;
    }
    ArrayList New46()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TLParenthesis tlparenthesisNode2 = (TLParenthesis)nodeArrayList1[0];
        PExpression pexpressionNode3 = (PExpression)nodeArrayList2[0];
        TRParenthesis trparenthesisNode4 = (TRParenthesis)nodeArrayList3[0];
        AParenthesisBaseExpression5 pexpression5Node1 = new AParenthesisBaseExpression5 (
              tlparenthesisNode2,
              pexpressionNode3,
              trparenthesisNode4
        );
        nodeList.Add(pexpression5Node1);
        return nodeList;
    }
    ArrayList New47()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TLSqBracket tlsqbracketNode3 = (TLSqBracket)nodeArrayList2[0];
        PExpression pexpressionNode4 = (PExpression)nodeArrayList3[0];
        TRSqBracket trsqbracketNode5 = (TRSqBracket)nodeArrayList4[0];
        AArrayBaseExpression5 pexpression5Node1 = new AArrayBaseExpression5 (
              tidNode2,
              tlsqbracketNode3,
              pexpressionNode4,
              trsqbracketNode5
        );
        nodeList.Add(pexpression5Node1);
        return nodeList;
    }
    ArrayList New48()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        ARecursiveExpressionVariableExpression5 pexpression5Node1 = new ARecursiveExpressionVariableExpression5 (
              tidNode2
        );
        nodeList.Add(pexpression5Node1);
        return nodeList;
    }
    ArrayList New49()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TInteger tintegerNode2 = (TInteger)nodeArrayList1[0];
        ARecursiveExpressionIntExpression5 pexpression5Node1 = new ARecursiveExpressionIntExpression5 (
              tintegerNode2
        );
        nodeList.Add(pexpression5Node1);
        return nodeList;
    }
    ArrayList New50()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TFloat tfloatNode2 = (TFloat)nodeArrayList1[0];
        ARecursiveExpressionFloatExpression5 pexpression5Node1 = new ARecursiveExpressionFloatExpression5 (
              tfloatNode2
        );
        nodeList.Add(pexpression5Node1);
        return nodeList;
    }
    ArrayList New51()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TString tstringNode2 = (TString)nodeArrayList1[0];
        ARecursiveExpressionStringExpression5 pexpression5Node1 = new ARecursiveExpressionStringExpression5 (
              tstringNode2
        );
        nodeList.Add(pexpression5Node1);
        return nodeList;
    }

    private static int[][][] actionTable = {
      new int[][] {
        new int[] {-1, 3, 0},
        new int[] {5, 0, 1},
      },
      new int[][] {
        new int[] {-1, 3, 1},
        new int[] {6, 0, 3},
      },
      new int[][] {
        new int[] {-1, 3, 2},
        new int[] {36, 2, -1},
      },
      new int[][] {
        new int[] {-1, 3, 3},
        new int[] {7, 0, 4},
      },
      new int[][] {
        new int[] {-1, 3, 4},
        new int[] {10, 0, 5},
      },
      new int[][] {
        new int[] {-1, 1, 9},
        new int[] {6, 0, 6},
        new int[] {28, 0, 7},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
        new int[] {31, 0, 10},
        new int[] {32, 0, 11},
        new int[] {34, 0, 12},
        new int[] {35, 0, 13},
      },
      new int[][] {
        new int[] {-1, 3, 6},
        new int[] {6, 0, 6},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
        new int[] {31, 0, 10},
        new int[] {35, 0, 29},
      },
      new int[][] {
        new int[] {-1, 3, 7},
        new int[] {35, 0, 31},
      },
      new int[][] {
        new int[] {-1, 1, 50},
      },
      new int[][] {
        new int[] {-1, 1, 49},
      },
      new int[][] {
        new int[] {-1, 1, 51},
      },
      new int[][] {
        new int[] {-1, 3, 11},
        new int[] {6, 0, 32},
      },
      new int[][] {
        new int[] {-1, 3, 12},
        new int[] {6, 0, 33},
      },
      new int[][] {
        new int[] {-1, 1, 48},
        new int[] {6, 0, 34},
        new int[] {8, 0, 35},
        new int[] {13, 0, 36},
        new int[] {26, 0, 37},
      },
      new int[][] {
        new int[] {-1, 3, 14},
        new int[] {11, 0, 38},
      },
      new int[][] {
        new int[] {-1, 1, 9},
        new int[] {6, 0, 6},
        new int[] {28, 0, 7},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
        new int[] {31, 0, 10},
        new int[] {32, 0, 11},
        new int[] {34, 0, 12},
        new int[] {35, 0, 13},
      },
      new int[][] {
        new int[] {-1, 1, 9},
        new int[] {6, 0, 6},
        new int[] {28, 0, 7},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
        new int[] {31, 0, 10},
        new int[] {32, 0, 11},
        new int[] {34, 0, 12},
        new int[] {35, 0, 13},
      },
      new int[][] {
        new int[] {-1, 1, 9},
        new int[] {6, 0, 6},
        new int[] {28, 0, 7},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
        new int[] {31, 0, 10},
        new int[] {32, 0, 11},
        new int[] {34, 0, 12},
        new int[] {35, 0, 13},
      },
      new int[][] {
        new int[] {-1, 1, 9},
        new int[] {6, 0, 6},
        new int[] {28, 0, 7},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
        new int[] {31, 0, 10},
        new int[] {32, 0, 11},
        new int[] {34, 0, 12},
        new int[] {35, 0, 13},
      },
      new int[][] {
        new int[] {-1, 1, 9},
        new int[] {6, 0, 6},
        new int[] {28, 0, 7},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
        new int[] {31, 0, 10},
        new int[] {32, 0, 11},
        new int[] {34, 0, 12},
        new int[] {35, 0, 13},
      },
      new int[][] {
        new int[] {-1, 1, 9},
        new int[] {6, 0, 6},
        new int[] {28, 0, 7},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
        new int[] {31, 0, 10},
        new int[] {32, 0, 11},
        new int[] {34, 0, 12},
        new int[] {35, 0, 13},
      },
      new int[][] {
        new int[] {-1, 1, 9},
        new int[] {6, 0, 6},
        new int[] {28, 0, 7},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
        new int[] {31, 0, 10},
        new int[] {32, 0, 11},
        new int[] {34, 0, 12},
        new int[] {35, 0, 13},
      },
      new int[][] {
        new int[] {-1, 1, 9},
        new int[] {6, 0, 6},
        new int[] {28, 0, 7},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
        new int[] {31, 0, 10},
        new int[] {32, 0, 11},
        new int[] {34, 0, 12},
        new int[] {35, 0, 13},
      },
      new int[][] {
        new int[] {-1, 3, 23},
        new int[] {18, 0, 47},
        new int[] {19, 0, 48},
        new int[] {20, 0, 49},
        new int[] {27, 0, 50},
      },
      new int[][] {
        new int[] {-1, 1, 31},
      },
      new int[][] {
        new int[] {-1, 1, 37},
        new int[] {14, 0, 51},
        new int[] {15, 0, 52},
        new int[] {21, 0, 53},
        new int[] {22, 0, 54},
        new int[] {23, 0, 55},
        new int[] {24, 0, 56},
        new int[] {25, 0, 57},
      },
      new int[][] {
        new int[] {-1, 1, 40},
        new int[] {16, 0, 58},
        new int[] {17, 0, 59},
      },
      new int[][] {
        new int[] {-1, 1, 43},
        new int[] {12, 0, 60},
      },
      new int[][] {
        new int[] {-1, 1, 45},
      },
      new int[][] {
        new int[] {-1, 1, 48},
        new int[] {8, 0, 61},
      },
      new int[][] {
        new int[] {-1, 3, 30},
        new int[] {7, 0, 62},
        new int[] {18, 0, 47},
        new int[] {19, 0, 48},
        new int[] {20, 0, 49},
      },
      new int[][] {
        new int[] {-1, 3, 31},
        new int[] {13, 0, 63},
      },
      new int[][] {
        new int[] {-1, 3, 32},
        new int[] {6, 0, 6},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
        new int[] {31, 0, 10},
        new int[] {35, 0, 29},
      },
      new int[][] {
        new int[] {-1, 3, 33},
        new int[] {6, 0, 6},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
        new int[] {31, 0, 10},
        new int[] {35, 0, 29},
      },
      new int[][] {
        new int[] {-1, 1, 26},
      },
      new int[][] {
        new int[] {-1, 3, 35},
        new int[] {6, 0, 6},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
        new int[] {31, 0, 10},
        new int[] {35, 0, 29},
      },
      new int[][] {
        new int[] {-1, 3, 36},
        new int[] {35, 0, 68},
      },
      new int[][] {
        new int[] {-1, 3, 37},
        new int[] {6, 0, 6},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
        new int[] {31, 0, 10},
        new int[] {35, 0, 29},
      },
      new int[][] {
        new int[] {-1, 1, 0},
      },
      new int[][] {
        new int[] {-1, 1, 1},
      },
      new int[][] {
        new int[] {-1, 1, 5},
      },
      new int[][] {
        new int[] {-1, 1, 8},
      },
      new int[][] {
        new int[] {-1, 1, 2},
      },
      new int[][] {
        new int[] {-1, 1, 3},
      },
      new int[][] {
        new int[] {-1, 1, 6},
      },
      new int[][] {
        new int[] {-1, 1, 7},
      },
      new int[][] {
        new int[] {-1, 1, 4},
      },
      new int[][] {
        new int[] {-1, 3, 47},
        new int[] {6, 0, 6},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
        new int[] {31, 0, 10},
        new int[] {35, 0, 29},
      },
      new int[][] {
        new int[] {-1, 3, 48},
        new int[] {6, 0, 6},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
        new int[] {31, 0, 10},
        new int[] {35, 0, 29},
      },
      new int[][] {
        new int[] {-1, 3, 49},
        new int[] {6, 0, 6},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
        new int[] {31, 0, 10},
        new int[] {35, 0, 29},
      },
      new int[][] {
        new int[] {-1, 1, 27},
      },
      new int[][] {
        new int[] {-1, 3, 51},
        new int[] {6, 0, 6},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
        new int[] {31, 0, 10},
        new int[] {35, 0, 29},
      },
      new int[][] {
        new int[] {-1, 3, 52},
        new int[] {6, 0, 6},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
        new int[] {31, 0, 10},
        new int[] {35, 0, 29},
      },
      new int[][] {
        new int[] {-1, 3, 53},
        new int[] {6, 0, 6},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
        new int[] {31, 0, 10},
        new int[] {35, 0, 29},
      },
      new int[][] {
        new int[] {-1, 3, 54},
        new int[] {6, 0, 6},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
        new int[] {31, 0, 10},
        new int[] {35, 0, 29},
      },
      new int[][] {
        new int[] {-1, 3, 55},
        new int[] {6, 0, 6},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
        new int[] {31, 0, 10},
        new int[] {35, 0, 29},
      },
      new int[][] {
        new int[] {-1, 3, 56},
        new int[] {6, 0, 6},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
        new int[] {31, 0, 10},
        new int[] {35, 0, 29},
      },
      new int[][] {
        new int[] {-1, 3, 57},
        new int[] {6, 0, 6},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
        new int[] {31, 0, 10},
        new int[] {35, 0, 29},
      },
      new int[][] {
        new int[] {-1, 3, 58},
        new int[] {6, 0, 6},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
        new int[] {31, 0, 10},
        new int[] {35, 0, 29},
      },
      new int[][] {
        new int[] {-1, 3, 59},
        new int[] {6, 0, 6},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
        new int[] {31, 0, 10},
        new int[] {35, 0, 29},
      },
      new int[][] {
        new int[] {-1, 3, 60},
        new int[] {6, 0, 6},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
        new int[] {31, 0, 10},
        new int[] {35, 0, 29},
      },
      new int[][] {
        new int[] {-1, 3, 61},
        new int[] {6, 0, 6},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
        new int[] {31, 0, 10},
        new int[] {35, 0, 29},
      },
      new int[][] {
        new int[] {-1, 1, 46},
      },
      new int[][] {
        new int[] {-1, 3, 63},
        new int[] {35, 0, 84},
      },
      new int[][] {
        new int[] {-1, 3, 64},
        new int[] {7, 0, 85},
        new int[] {18, 0, 47},
        new int[] {19, 0, 48},
        new int[] {20, 0, 49},
      },
      new int[][] {
        new int[] {-1, 3, 65},
        new int[] {7, 0, 86},
        new int[] {18, 0, 47},
        new int[] {19, 0, 48},
        new int[] {20, 0, 49},
      },
      new int[][] {
        new int[] {-1, 3, 66},
        new int[] {7, 0, 87},
        new int[] {35, 0, 88},
      },
      new int[][] {
        new int[] {-1, 3, 67},
        new int[] {9, 0, 89},
        new int[] {18, 0, 47},
        new int[] {19, 0, 48},
        new int[] {20, 0, 49},
      },
      new int[][] {
        new int[] {-1, 3, 68},
        new int[] {8, 0, 90},
        new int[] {27, 0, 91},
      },
      new int[][] {
        new int[] {-1, 3, 69},
        new int[] {18, 0, 47},
        new int[] {19, 0, 48},
        new int[] {20, 0, 49},
        new int[] {27, 0, 92},
      },
      new int[][] {
        new int[] {-1, 1, 28},
      },
      new int[][] {
        new int[] {-1, 1, 29},
      },
      new int[][] {
        new int[] {-1, 1, 30},
      },
      new int[][] {
        new int[] {-1, 1, 38},
        new int[] {16, 0, 58},
        new int[] {17, 0, 59},
      },
      new int[][] {
        new int[] {-1, 1, 39},
        new int[] {16, 0, 58},
        new int[] {17, 0, 59},
      },
      new int[][] {
        new int[] {-1, 1, 36},
        new int[] {14, 0, 51},
        new int[] {15, 0, 52},
      },
      new int[][] {
        new int[] {-1, 1, 35},
        new int[] {14, 0, 51},
        new int[] {15, 0, 52},
      },
      new int[][] {
        new int[] {-1, 1, 34},
        new int[] {14, 0, 51},
        new int[] {15, 0, 52},
      },
      new int[][] {
        new int[] {-1, 1, 32},
        new int[] {14, 0, 51},
        new int[] {15, 0, 52},
      },
      new int[][] {
        new int[] {-1, 1, 33},
        new int[] {14, 0, 51},
        new int[] {15, 0, 52},
      },
      new int[][] {
        new int[] {-1, 1, 41},
        new int[] {12, 0, 60},
      },
      new int[][] {
        new int[] {-1, 1, 42},
        new int[] {12, 0, 60},
      },
      new int[][] {
        new int[] {-1, 1, 44},
      },
      new int[][] {
        new int[] {-1, 3, 83},
        new int[] {9, 0, 93},
        new int[] {18, 0, 47},
        new int[] {19, 0, 48},
        new int[] {20, 0, 49},
      },
      new int[][] {
        new int[] {-1, 3, 84},
        new int[] {26, 0, 94},
      },
      new int[][] {
        new int[] {-1, 3, 85},
        new int[] {10, 0, 95},
      },
      new int[][] {
        new int[] {-1, 3, 86},
        new int[] {10, 0, 96},
      },
      new int[][] {
        new int[] {-1, 3, 87},
        new int[] {10, 0, 97},
        new int[] {27, 0, 98},
      },
      new int[][] {
        new int[] {-1, 3, 88},
        new int[] {13, 0, 99},
      },
      new int[][] {
        new int[] {-1, 1, 47},
        new int[] {26, 0, 100},
      },
      new int[][] {
        new int[] {-1, 3, 90},
        new int[] {9, 0, 101},
      },
      new int[][] {
        new int[] {-1, 1, 17},
      },
      new int[][] {
        new int[] {-1, 1, 19},
      },
      new int[][] {
        new int[] {-1, 1, 47},
      },
      new int[][] {
        new int[] {-1, 3, 94},
        new int[] {6, 0, 6},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
        new int[] {31, 0, 10},
        new int[] {35, 0, 29},
      },
      new int[][] {
        new int[] {-1, 1, 15},
        new int[] {6, 0, 6},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
        new int[] {31, 0, 10},
        new int[] {32, 0, 11},
        new int[] {34, 0, 12},
        new int[] {35, 0, 103},
      },
      new int[][] {
        new int[] {-1, 1, 15},
        new int[] {6, 0, 6},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
        new int[] {31, 0, 10},
        new int[] {32, 0, 11},
        new int[] {34, 0, 12},
        new int[] {35, 0, 103},
      },
      new int[][] {
        new int[] {-1, 1, 15},
        new int[] {6, 0, 6},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
        new int[] {31, 0, 10},
        new int[] {32, 0, 11},
        new int[] {34, 0, 12},
        new int[] {35, 0, 103},
      },
      new int[][] {
        new int[] {-1, 1, 23},
      },
      new int[][] {
        new int[] {-1, 3, 99},
        new int[] {6, 0, 6},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
        new int[] {31, 0, 10},
        new int[] {35, 0, 29},
      },
      new int[][] {
        new int[] {-1, 3, 100},
        new int[] {6, 0, 6},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
        new int[] {31, 0, 10},
        new int[] {35, 0, 29},
      },
      new int[][] {
        new int[] {-1, 3, 101},
        new int[] {27, 0, 114},
      },
      new int[][] {
        new int[] {-1, 3, 102},
        new int[] {18, 0, 47},
        new int[] {19, 0, 48},
        new int[] {20, 0, 49},
        new int[] {27, 0, 115},
      },
      new int[][] {
        new int[] {-1, 1, 48},
        new int[] {6, 0, 116},
        new int[] {8, 0, 35},
        new int[] {26, 0, 37},
      },
      new int[][] {
        new int[] {-1, 3, 104},
        new int[] {11, 0, 117},
      },
      new int[][] {
        new int[] {-1, 1, 9},
        new int[] {6, 0, 6},
        new int[] {28, 0, 7},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
        new int[] {31, 0, 10},
        new int[] {32, 0, 11},
        new int[] {34, 0, 12},
        new int[] {35, 0, 13},
      },
      new int[][] {
        new int[] {-1, 1, 15},
        new int[] {6, 0, 6},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
        new int[] {31, 0, 10},
        new int[] {32, 0, 11},
        new int[] {34, 0, 12},
        new int[] {35, 0, 103},
      },
      new int[][] {
        new int[] {-1, 1, 15},
        new int[] {6, 0, 6},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
        new int[] {31, 0, 10},
        new int[] {32, 0, 11},
        new int[] {34, 0, 12},
        new int[] {35, 0, 103},
      },
      new int[][] {
        new int[] {-1, 1, 15},
        new int[] {6, 0, 6},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
        new int[] {31, 0, 10},
        new int[] {32, 0, 11},
        new int[] {34, 0, 12},
        new int[] {35, 0, 103},
      },
      new int[][] {
        new int[] {-1, 1, 15},
        new int[] {6, 0, 6},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
        new int[] {31, 0, 10},
        new int[] {32, 0, 11},
        new int[] {34, 0, 12},
        new int[] {35, 0, 103},
      },
      new int[][] {
        new int[] {-1, 3, 110},
        new int[] {11, 0, 123},
      },
      new int[][] {
        new int[] {-1, 3, 111},
        new int[] {11, 0, 124},
      },
      new int[][] {
        new int[] {-1, 1, 25},
        new int[] {18, 0, 47},
        new int[] {19, 0, 48},
        new int[] {20, 0, 49},
      },
      new int[][] {
        new int[] {-1, 3, 113},
        new int[] {18, 0, 47},
        new int[] {19, 0, 48},
        new int[] {20, 0, 49},
        new int[] {27, 0, 125},
      },
      new int[][] {
        new int[] {-1, 1, 18},
      },
      new int[][] {
        new int[] {-1, 1, 16},
      },
      new int[][] {
        new int[] {-1, 1, 26},
      },
      new int[][] {
        new int[] {-1, 1, 21},
      },
      new int[][] {
        new int[] {-1, 1, 14},
      },
      new int[][] {
        new int[] {-1, 1, 10},
      },
      new int[][] {
        new int[] {-1, 1, 11},
      },
      new int[][] {
        new int[] {-1, 1, 13},
      },
      new int[][] {
        new int[] {-1, 1, 12},
      },
      new int[][] {
        new int[] {-1, 1, 22},
      },
      new int[][] {
        new int[] {-1, 1, 24},
      },
      new int[][] {
        new int[] {-1, 1, 20},
      },
      new int[][] {
        new int[] {-1, 3, 126},
        new int[] {7, 0, 127},
        new int[] {35, 0, 88},
      },
      new int[][] {
        new int[] {-1, 3, 127},
        new int[] {27, 0, 98},
      },
    };

    private static int[][][] gotoTable  = {
      new int[][] {
        new int[] {-1, 2},
      },
      new int[][] {
        new int[] {-1, 14},
        new int[] {15, 39},
        new int[] {16, 40},
        new int[] {17, 41},
        new int[] {18, 42},
        new int[] {19, 43},
        new int[] {20, 44},
        new int[] {21, 45},
        new int[] {22, 46},
        new int[] {105, 118},
      },
      new int[][] {
        new int[] {-1, 104},
        new int[] {96, 110},
        new int[] {97, 111},
        new int[] {106, 119},
        new int[] {107, 120},
        new int[] {108, 121},
        new int[] {109, 122},
      },
      new int[][] {
        new int[] {-1, 15},
      },
      new int[][] {
        new int[] {-1, 16},
      },
      new int[][] {
        new int[] {-1, 17},
        new int[] {95, 105},
        new int[] {96, 105},
        new int[] {97, 105},
        new int[] {106, 105},
        new int[] {107, 105},
        new int[] {108, 105},
        new int[] {109, 105},
      },
      new int[][] {
        new int[] {-1, 18},
        new int[] {95, 106},
        new int[] {96, 106},
        new int[] {97, 106},
        new int[] {106, 106},
        new int[] {107, 106},
        new int[] {108, 106},
        new int[] {109, 106},
      },
      new int[][] {
        new int[] {-1, 19},
        new int[] {95, 107},
        new int[] {96, 107},
        new int[] {97, 107},
        new int[] {106, 107},
        new int[] {107, 107},
        new int[] {108, 107},
        new int[] {109, 107},
      },
      new int[][] {
        new int[] {-1, 20},
        new int[] {95, 108},
        new int[] {96, 108},
        new int[] {97, 108},
        new int[] {106, 108},
        new int[] {107, 108},
        new int[] {108, 108},
        new int[] {109, 108},
      },
      new int[][] {
        new int[] {-1, 21},
      },
      new int[][] {
        new int[] {-1, 66},
        new int[] {116, 126},
      },
      new int[][] {
        new int[] {-1, 22},
        new int[] {95, 109},
        new int[] {96, 109},
        new int[] {97, 109},
        new int[] {106, 109},
        new int[] {107, 109},
        new int[] {108, 109},
        new int[] {109, 109},
      },
      new int[][] {
        new int[] {-1, 23},
        new int[] {6, 30},
        new int[] {32, 64},
        new int[] {33, 65},
        new int[] {35, 67},
        new int[] {37, 69},
        new int[] {61, 83},
        new int[] {94, 102},
        new int[] {99, 112},
        new int[] {100, 113},
      },
      new int[][] {
        new int[] {-1, 24},
        new int[] {47, 70},
        new int[] {48, 71},
        new int[] {49, 72},
      },
      new int[][] {
        new int[] {-1, 25},
        new int[] {53, 75},
        new int[] {54, 76},
        new int[] {55, 77},
        new int[] {56, 78},
        new int[] {57, 79},
      },
      new int[][] {
        new int[] {-1, 26},
        new int[] {51, 73},
        new int[] {52, 74},
      },
      new int[][] {
        new int[] {-1, 27},
        new int[] {58, 80},
        new int[] {59, 81},
      },
      new int[][] {
        new int[] {-1, 28},
        new int[] {60, 82},
      },
    };

    private static String[] errorMessages = {
      "expecting: 'main'",
      "expecting: '('",
      "expecting: EOF",
      "expecting: ')'",
      "expecting: '{'",
      "expecting: '(', '}', 'const', float, integer, string, 'if', 'while', id",
      "expecting: '(', float, integer, string, id",
      "expecting: id",
      "expecting: ')', ']', '^', '+', '-', '*', '/', '&&', '||', '&!', '==', '>=', '<=', '>', '<', ';', id",
      "expecting: '(', '[', '^', '.', '+', '-', '*', '/', '&&', '||', '&!', '==', '>=', '<=', '>', '<', '=', ';'",
      "expecting: '}'",
      "expecting: '&&', '||', '&!', ';'",
      "expecting: ')', ']', '&&', '||', '&!', ';', id",
      "expecting: ')', ']', '+', '-', '&&', '||', '&!', '==', '>=', '<=', '>', '<', ';', id",
      "expecting: ')', ']', '+', '-', '*', '/', '&&', '||', '&!', '==', '>=', '<=', '>', '<', ';', id",
      "expecting: ')', '[', ']', '^', '+', '-', '*', '/', '&&', '||', '&!', '==', '>=', '<=', '>', '<', ';', id",
      "expecting: ')', '&&', '||', '&!'",
      "expecting: '.'",
      "expecting: ')', id",
      "expecting: ']', '&&', '||', '&!'",
      "expecting: '[', ';'",
      "expecting: ')', ']', '+', '-', '&&', '||', '&!', ';', id",
      "expecting: '='",
      "expecting: '{', ';'",
      "expecting: '^', '+', '-', '*', '/', '&&', '||', '&!', '==', '>=', '<=', '>', '<', '=', ';'",
      "expecting: ']'",
      "expecting: '(', '}', float, integer, string, 'if', 'while', id",
      "expecting: ';'",
      "expecting: '(', '[', '^', '+', '-', '*', '/', '&&', '||', '&!', '==', '>=', '<=', '>', '<', '=', ';'",
      "expecting: ')', '&&', '||', '&!', id",
    };

    private static int[] errors = {
      0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 1, 1, 9, 10, 5, 
      5, 5, 5, 5, 5, 5, 5, 11, 12, 13, 14, 8, 8, 15, 16, 17, 
      6, 6, 18, 6, 7, 6, 2, 10, 10, 10, 10, 10, 10, 10, 10, 6, 
      6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 7, 
      16, 16, 18, 19, 20, 11, 12, 12, 12, 14, 14, 21, 21, 21, 21, 21, 
      8, 8, 8, 19, 22, 4, 4, 23, 17, 24, 25, 5, 5, 8, 6, 26, 
      26, 26, 5, 6, 6, 27, 11, 28, 10, 5, 26, 26, 26, 26, 10, 10, 
      29, 11, 5, 5, 18, 5, 10, 10, 10, 10, 10, 5, 5, 5, 18, 27, 
      
    };
}
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using comp5210.node;

namespace comp5210.analysis {


public interface Analysis : Switch
{
    Object GetIn(Node node);
    void SetIn(Node node, Object inobj);
    Object GetOut(Node node);
    void SetOut(Node node, Object outobj);

    void CaseStart(Start node);
    void CaseAProgram(AProgram node);
    void CaseAConstantSideBody(AConstantSideBody node);
    void CaseAIfSideBody(AIfSideBody node);
    void CaseAWhileSideBody(AWhileSideBody node);
    void CaseAExpressionSideBody(AExpressionSideBody node);
    void CaseAVariableSideBody(AVariableSideBody node);
    void CaseAProcedureCallSideBody(AProcedureCallSideBody node);
    void CaseAProcedureSideBody(AProcedureSideBody node);
    void CaseAAssignmentSideBody(AAssignmentSideBody node);
    void CaseAEmptyBodyBody(AEmptyBodyBody node);
    void CaseAIfSideBodyLesser(AIfSideBodyLesser node);
    void CaseAWhileSideBodyLesser(AWhileSideBodyLesser node);
    void CaseAExpressionSideBodyLesser(AExpressionSideBodyLesser node);
    void CaseAProcedureCallSideBodyLesser(AProcedureCallSideBodyLesser node);
    void CaseAAssignmentSideBodyLesser(AAssignmentSideBodyLesser node);
    void CaseAEmptyBodyBodyLesser(AEmptyBodyBodyLesser node);
    void CaseAConstantBaseConstant(AConstantBaseConstant node);
    void CaseAVarBaseVariableDeclaration(AVarBaseVariableDeclaration node);
    void CaseAArrayDeclarationBaseVariableDeclaration(AArrayDeclarationBaseVariableDeclaration node);
    void CaseAStandardAssignmentAssignment(AStandardAssignmentAssignment node);
    void CaseAArrayAssignmentAssignment(AArrayAssignmentAssignment node);
    void CaseAIfBaseIfStatement(AIfBaseIfStatement node);
    void CaseAWhileBaseWhileStatement(AWhileBaseWhileStatement node);
    void CaseAProcedureCall(AProcedureCall node);
    void CaseAProcedureDeclaration(AProcedureDeclaration node);
    void CaseAProcedureHelperMainProcedureHelper(AProcedureHelperMainProcedureHelper node);
    void CaseAProcedureHelperEmptyProcedureHelper(AProcedureHelperEmptyProcedureHelper node);
    void CaseAExpressionMain(AExpressionMain node);
    void CaseAAndBaseExpression(AAndBaseExpression node);
    void CaseAOrBaseExpression(AOrBaseExpression node);
    void CaseANotBaseExpression(ANotBaseExpression node);
    void CaseAAndNextExpression(AAndNextExpression node);
    void CaseAGreaterThanBaseExpression1(AGreaterThanBaseExpression1 node);
    void CaseALessThanBaseExpression1(ALessThanBaseExpression1 node);
    void CaseALessThanOrEqualBaseExpression1(ALessThanOrEqualBaseExpression1 node);
    void CaseAGreaterThanOrEqualBaseExpression1(AGreaterThanOrEqualBaseExpression1 node);
    void CaseAEquivalentBaseExpression1(AEquivalentBaseExpression1 node);
    void CaseAComparisonNextExpression1(AComparisonNextExpression1 node);
    void CaseAAdditionBaseExpression2(AAdditionBaseExpression2 node);
    void CaseASubtractionBaseExpression2(ASubtractionBaseExpression2 node);
    void CaseAArithmaticNextExpression2(AArithmaticNextExpression2 node);
    void CaseAMultiplicationBaseExpression3(AMultiplicationBaseExpression3 node);
    void CaseADivisionBaseExpression3(ADivisionBaseExpression3 node);
    void CaseAAlgebraNextExpression3(AAlgebraNextExpression3 node);
    void CaseAExponentBaseExpression4(AExponentBaseExpression4 node);
    void CaseAExponenetNextExpression4(AExponenetNextExpression4 node);
    void CaseAParenthesisBaseExpression5(AParenthesisBaseExpression5 node);
    void CaseAArrayBaseExpression5(AArrayBaseExpression5 node);
    void CaseARecursiveExpressionVariableExpression5(ARecursiveExpressionVariableExpression5 node);
    void CaseARecursiveExpressionIntExpression5(ARecursiveExpressionIntExpression5 node);
    void CaseARecursiveExpressionFloatExpression5(ARecursiveExpressionFloatExpression5 node);
    void CaseARecursiveExpressionStringExpression5(ARecursiveExpressionStringExpression5 node);

    void CaseTShout(TShout node);
    void CaseTWhitespace(TWhitespace node);
    void CaseTComment(TComment node);
    void CaseTClass(TClass node);
    void CaseTPublic(TPublic node);
    void CaseTPrivate(TPrivate node);
    void CaseTReturn(TReturn node);
    void CaseTMainProgram(TMainProgram node);
    void CaseTLParenthesis(TLParenthesis node);
    void CaseTRParenthesis(TRParenthesis node);
    void CaseTLSqBracket(TLSqBracket node);
    void CaseTRSqBracket(TRSqBracket node);
    void CaseTLCuBracket(TLCuBracket node);
    void CaseTRCuBracket(TRCuBracket node);
    void CaseTExponent(TExponent node);
    void CaseTSeperator(TSeperator node);
    void CaseTAddition(TAddition node);
    void CaseTSubtraction(TSubtraction node);
    void CaseTMultiplication(TMultiplication node);
    void CaseTDivision(TDivision node);
    void CaseTAndSign(TAndSign node);
    void CaseTOrSign(TOrSign node);
    void CaseTNotSign(TNotSign node);
    void CaseTEquivalent(TEquivalent node);
    void CaseTGreaterOrEqual(TGreaterOrEqual node);
    void CaseTLesserOrEqual(TLesserOrEqual node);
    void CaseTGreater(TGreater node);
    void CaseTLess(TLess node);
    void CaseTEqual(TEqual node);
    void CaseTSemicolon(TSemicolon node);
    void CaseTConstToken(TConstToken node);
    void CaseTFloat(TFloat node);
    void CaseTInteger(TInteger node);
    void CaseTString(TString node);
    void CaseTIf(TIf node);
    void CaseTElse(TElse node);
    void CaseTWhile(TWhile node);
    void CaseTId(TId node);
    void CaseEOF(EOF node);
}


public class AnalysisAdapter : Analysis
{
    private Hashtable inhash;
    private Hashtable outhash;

    public virtual Object GetIn(Node node)
    {
        if(inhash == null)
        {
            return null;
        }

        return inhash[node];
    }

    public virtual void SetIn(Node node, Object inobj)
    {
        if(this.inhash == null)
        {
            this.inhash = new Hashtable(1);
        }

        if(inobj != null)
        {
            this.inhash[node] = inobj;
        }
        else
        {
            this.inhash.Remove(node);
        }
    }
    public virtual Object GetOut(Node node)
    {
        if(outhash == null)
        {
            return null;
        }

        return outhash[node];
    }

    public virtual void SetOut(Node node, Object outobj)
    {
        if(this.outhash == null)
        {
            this.outhash = new Hashtable(1);
        }

        if(outobj != null)
        {
            this.outhash[node] = outobj;
        }
        else
        {
            this.outhash.Remove(node);
        }
    }
    public virtual void CaseStart(Start node)
    {
        DefaultCase(node);
    }

    public virtual void CaseAProgram(AProgram node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAConstantSideBody(AConstantSideBody node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfSideBody(AIfSideBody node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhileSideBody(AWhileSideBody node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAExpressionSideBody(AExpressionSideBody node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVariableSideBody(AVariableSideBody node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAProcedureCallSideBody(AProcedureCallSideBody node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAProcedureSideBody(AProcedureSideBody node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignmentSideBody(AAssignmentSideBody node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEmptyBodyBody(AEmptyBodyBody node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfSideBodyLesser(AIfSideBodyLesser node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhileSideBodyLesser(AWhileSideBodyLesser node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAExpressionSideBodyLesser(AExpressionSideBodyLesser node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAProcedureCallSideBodyLesser(AProcedureCallSideBodyLesser node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignmentSideBodyLesser(AAssignmentSideBodyLesser node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEmptyBodyBodyLesser(AEmptyBodyBodyLesser node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAConstantBaseConstant(AConstantBaseConstant node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVarBaseVariableDeclaration(AVarBaseVariableDeclaration node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAArrayDeclarationBaseVariableDeclaration(AArrayDeclarationBaseVariableDeclaration node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStandardAssignmentAssignment(AStandardAssignmentAssignment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAArrayAssignmentAssignment(AArrayAssignmentAssignment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfBaseIfStatement(AIfBaseIfStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhileBaseWhileStatement(AWhileBaseWhileStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAProcedureCall(AProcedureCall node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAProcedureDeclaration(AProcedureDeclaration node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAProcedureHelperMainProcedureHelper(AProcedureHelperMainProcedureHelper node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAProcedureHelperEmptyProcedureHelper(AProcedureHelperEmptyProcedureHelper node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAExpressionMain(AExpressionMain node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAndBaseExpression(AAndBaseExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOrBaseExpression(AOrBaseExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANotBaseExpression(ANotBaseExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAndNextExpression(AAndNextExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGreaterThanBaseExpression1(AGreaterThanBaseExpression1 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALessThanBaseExpression1(ALessThanBaseExpression1 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALessThanOrEqualBaseExpression1(ALessThanOrEqualBaseExpression1 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGreaterThanOrEqualBaseExpression1(AGreaterThanOrEqualBaseExpression1 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEquivalentBaseExpression1(AEquivalentBaseExpression1 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAComparisonNextExpression1(AComparisonNextExpression1 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAdditionBaseExpression2(AAdditionBaseExpression2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASubtractionBaseExpression2(ASubtractionBaseExpression2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAArithmaticNextExpression2(AArithmaticNextExpression2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultiplicationBaseExpression3(AMultiplicationBaseExpression3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADivisionBaseExpression3(ADivisionBaseExpression3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAlgebraNextExpression3(AAlgebraNextExpression3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAExponentBaseExpression4(AExponentBaseExpression4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAExponenetNextExpression4(AExponenetNextExpression4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParenthesisBaseExpression5(AParenthesisBaseExpression5 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAArrayBaseExpression5(AArrayBaseExpression5 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseARecursiveExpressionVariableExpression5(ARecursiveExpressionVariableExpression5 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseARecursiveExpressionIntExpression5(ARecursiveExpressionIntExpression5 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseARecursiveExpressionFloatExpression5(ARecursiveExpressionFloatExpression5 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseARecursiveExpressionStringExpression5(ARecursiveExpressionStringExpression5 node)
    {
        DefaultCase(node);
    }

    public virtual void CaseTShout(TShout node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTWhitespace(TWhitespace node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComment(TComment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTClass(TClass node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPublic(TPublic node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPrivate(TPrivate node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTReturn(TReturn node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMainProgram(TMainProgram node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLParenthesis(TLParenthesis node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRParenthesis(TRParenthesis node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLSqBracket(TLSqBracket node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRSqBracket(TRSqBracket node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLCuBracket(TLCuBracket node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRCuBracket(TRCuBracket node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTExponent(TExponent node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSeperator(TSeperator node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAddition(TAddition node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSubtraction(TSubtraction node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMultiplication(TMultiplication node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDivision(TDivision node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAndSign(TAndSign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOrSign(TOrSign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNotSign(TNotSign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEquivalent(TEquivalent node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGreaterOrEqual(TGreaterOrEqual node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLesserOrEqual(TLesserOrEqual node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGreater(TGreater node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLess(TLess node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEqual(TEqual node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSemicolon(TSemicolon node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTConstToken(TConstToken node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTFloat(TFloat node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTInteger(TInteger node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTString(TString node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTIf(TIf node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTElse(TElse node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTWhile(TWhile node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTId(TId node)
    {
        DefaultCase(node);
    }

    public virtual void CaseEOF(EOF node)
    {
        DefaultCase(node);
    }

    public virtual void DefaultCase(Node node)
    {
    }
}


public class DepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetPProgram().Apply(this);
        node.GetEOF().Apply(this);
        OutStart(node);
    }

    public virtual void InAProgram(AProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgram(AProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgram(AProgram node)
    {
        InAProgram(node);
        if(node.GetMainProgram() != null)
        {
            node.GetMainProgram().Apply(this);
        }
        if(node.GetLParenthesis() != null)
        {
            node.GetLParenthesis().Apply(this);
        }
        if(node.GetRParenthesis() != null)
        {
            node.GetRParenthesis().Apply(this);
        }
        if(node.GetLCuBracket() != null)
        {
            node.GetLCuBracket().Apply(this);
        }
        if(node.GetBody() != null)
        {
            node.GetBody().Apply(this);
        }
        if(node.GetRCuBracket() != null)
        {
            node.GetRCuBracket().Apply(this);
        }
        OutAProgram(node);
    }
    public virtual void InAConstantSideBody(AConstantSideBody node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstantSideBody(AConstantSideBody node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstantSideBody(AConstantSideBody node)
    {
        InAConstantSideBody(node);
        if(node.GetConstant() != null)
        {
            node.GetConstant().Apply(this);
        }
        if(node.GetBody() != null)
        {
            node.GetBody().Apply(this);
        }
        OutAConstantSideBody(node);
    }
    public virtual void InAIfSideBody(AIfSideBody node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfSideBody(AIfSideBody node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfSideBody(AIfSideBody node)
    {
        InAIfSideBody(node);
        if(node.GetIfStatement() != null)
        {
            node.GetIfStatement().Apply(this);
        }
        if(node.GetBody() != null)
        {
            node.GetBody().Apply(this);
        }
        OutAIfSideBody(node);
    }
    public virtual void InAWhileSideBody(AWhileSideBody node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileSideBody(AWhileSideBody node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileSideBody(AWhileSideBody node)
    {
        InAWhileSideBody(node);
        if(node.GetWhileStatement() != null)
        {
            node.GetWhileStatement().Apply(this);
        }
        if(node.GetBody() != null)
        {
            node.GetBody().Apply(this);
        }
        OutAWhileSideBody(node);
    }
    public virtual void InAExpressionSideBody(AExpressionSideBody node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExpressionSideBody(AExpressionSideBody node)
    {
        DefaultOut(node);
    }

    public override void CaseAExpressionSideBody(AExpressionSideBody node)
    {
        InAExpressionSideBody(node);
        if(node.GetExpressionMain() != null)
        {
            node.GetExpressionMain().Apply(this);
        }
        if(node.GetBody() != null)
        {
            node.GetBody().Apply(this);
        }
        OutAExpressionSideBody(node);
    }
    public virtual void InAVariableSideBody(AVariableSideBody node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableSideBody(AVariableSideBody node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableSideBody(AVariableSideBody node)
    {
        InAVariableSideBody(node);
        if(node.GetVariableDeclaration() != null)
        {
            node.GetVariableDeclaration().Apply(this);
        }
        if(node.GetBody() != null)
        {
            node.GetBody().Apply(this);
        }
        OutAVariableSideBody(node);
    }
    public virtual void InAProcedureCallSideBody(AProcedureCallSideBody node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProcedureCallSideBody(AProcedureCallSideBody node)
    {
        DefaultOut(node);
    }

    public override void CaseAProcedureCallSideBody(AProcedureCallSideBody node)
    {
        InAProcedureCallSideBody(node);
        if(node.GetProcedureCall() != null)
        {
            node.GetProcedureCall().Apply(this);
        }
        if(node.GetBody() != null)
        {
            node.GetBody().Apply(this);
        }
        OutAProcedureCallSideBody(node);
    }
    public virtual void InAProcedureSideBody(AProcedureSideBody node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProcedureSideBody(AProcedureSideBody node)
    {
        DefaultOut(node);
    }

    public override void CaseAProcedureSideBody(AProcedureSideBody node)
    {
        InAProcedureSideBody(node);
        if(node.GetProcedureDeclaration() != null)
        {
            node.GetProcedureDeclaration().Apply(this);
        }
        if(node.GetBody() != null)
        {
            node.GetBody().Apply(this);
        }
        OutAProcedureSideBody(node);
    }
    public virtual void InAAssignmentSideBody(AAssignmentSideBody node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignmentSideBody(AAssignmentSideBody node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignmentSideBody(AAssignmentSideBody node)
    {
        InAAssignmentSideBody(node);
        if(node.GetAssignment() != null)
        {
            node.GetAssignment().Apply(this);
        }
        if(node.GetBody() != null)
        {
            node.GetBody().Apply(this);
        }
        OutAAssignmentSideBody(node);
    }
    public virtual void InAEmptyBodyBody(AEmptyBodyBody node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEmptyBodyBody(AEmptyBodyBody node)
    {
        DefaultOut(node);
    }

    public override void CaseAEmptyBodyBody(AEmptyBodyBody node)
    {
        InAEmptyBodyBody(node);
        OutAEmptyBodyBody(node);
    }
    public virtual void InAIfSideBodyLesser(AIfSideBodyLesser node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfSideBodyLesser(AIfSideBodyLesser node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfSideBodyLesser(AIfSideBodyLesser node)
    {
        InAIfSideBodyLesser(node);
        if(node.GetIfStatement() != null)
        {
            node.GetIfStatement().Apply(this);
        }
        if(node.GetBodyLesser() != null)
        {
            node.GetBodyLesser().Apply(this);
        }
        OutAIfSideBodyLesser(node);
    }
    public virtual void InAWhileSideBodyLesser(AWhileSideBodyLesser node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileSideBodyLesser(AWhileSideBodyLesser node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileSideBodyLesser(AWhileSideBodyLesser node)
    {
        InAWhileSideBodyLesser(node);
        if(node.GetWhileStatement() != null)
        {
            node.GetWhileStatement().Apply(this);
        }
        if(node.GetBodyLesser() != null)
        {
            node.GetBodyLesser().Apply(this);
        }
        OutAWhileSideBodyLesser(node);
    }
    public virtual void InAExpressionSideBodyLesser(AExpressionSideBodyLesser node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExpressionSideBodyLesser(AExpressionSideBodyLesser node)
    {
        DefaultOut(node);
    }

    public override void CaseAExpressionSideBodyLesser(AExpressionSideBodyLesser node)
    {
        InAExpressionSideBodyLesser(node);
        if(node.GetExpressionMain() != null)
        {
            node.GetExpressionMain().Apply(this);
        }
        if(node.GetBodyLesser() != null)
        {
            node.GetBodyLesser().Apply(this);
        }
        OutAExpressionSideBodyLesser(node);
    }
    public virtual void InAProcedureCallSideBodyLesser(AProcedureCallSideBodyLesser node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProcedureCallSideBodyLesser(AProcedureCallSideBodyLesser node)
    {
        DefaultOut(node);
    }

    public override void CaseAProcedureCallSideBodyLesser(AProcedureCallSideBodyLesser node)
    {
        InAProcedureCallSideBodyLesser(node);
        if(node.GetProcedureCall() != null)
        {
            node.GetProcedureCall().Apply(this);
        }
        if(node.GetBodyLesser() != null)
        {
            node.GetBodyLesser().Apply(this);
        }
        OutAProcedureCallSideBodyLesser(node);
    }
    public virtual void InAAssignmentSideBodyLesser(AAssignmentSideBodyLesser node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignmentSideBodyLesser(AAssignmentSideBodyLesser node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignmentSideBodyLesser(AAssignmentSideBodyLesser node)
    {
        InAAssignmentSideBodyLesser(node);
        if(node.GetAssignment() != null)
        {
            node.GetAssignment().Apply(this);
        }
        if(node.GetBody() != null)
        {
            node.GetBody().Apply(this);
        }
        OutAAssignmentSideBodyLesser(node);
    }
    public virtual void InAEmptyBodyBodyLesser(AEmptyBodyBodyLesser node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEmptyBodyBodyLesser(AEmptyBodyBodyLesser node)
    {
        DefaultOut(node);
    }

    public override void CaseAEmptyBodyBodyLesser(AEmptyBodyBodyLesser node)
    {
        InAEmptyBodyBodyLesser(node);
        OutAEmptyBodyBodyLesser(node);
    }
    public virtual void InAConstantBaseConstant(AConstantBaseConstant node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstantBaseConstant(AConstantBaseConstant node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstantBaseConstant(AConstantBaseConstant node)
    {
        InAConstantBaseConstant(node);
        if(node.GetConstToken() != null)
        {
            node.GetConstToken().Apply(this);
        }
        if(node.GetDatatype() != null)
        {
            node.GetDatatype().Apply(this);
        }
        if(node.GetSeperator() != null)
        {
            node.GetSeperator().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutAConstantBaseConstant(node);
    }
    public virtual void InAVarBaseVariableDeclaration(AVarBaseVariableDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVarBaseVariableDeclaration(AVarBaseVariableDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseAVarBaseVariableDeclaration(AVarBaseVariableDeclaration node)
    {
        InAVarBaseVariableDeclaration(node);
        if(node.GetDatatype() != null)
        {
            node.GetDatatype().Apply(this);
        }
        if(node.GetSeperator() != null)
        {
            node.GetSeperator().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutAVarBaseVariableDeclaration(node);
    }
    public virtual void InAArrayDeclarationBaseVariableDeclaration(AArrayDeclarationBaseVariableDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayDeclarationBaseVariableDeclaration(AArrayDeclarationBaseVariableDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayDeclarationBaseVariableDeclaration(AArrayDeclarationBaseVariableDeclaration node)
    {
        InAArrayDeclarationBaseVariableDeclaration(node);
        if(node.GetDatatype() != null)
        {
            node.GetDatatype().Apply(this);
        }
        if(node.GetSeperator() != null)
        {
            node.GetSeperator().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetLSqBracket() != null)
        {
            node.GetLSqBracket().Apply(this);
        }
        if(node.GetRSqBracket() != null)
        {
            node.GetRSqBracket().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutAArrayDeclarationBaseVariableDeclaration(node);
    }
    public virtual void InAStandardAssignmentAssignment(AStandardAssignmentAssignment node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStandardAssignmentAssignment(AStandardAssignmentAssignment node)
    {
        DefaultOut(node);
    }

    public override void CaseAStandardAssignmentAssignment(AStandardAssignmentAssignment node)
    {
        InAStandardAssignmentAssignment(node);
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutAStandardAssignmentAssignment(node);
    }
    public virtual void InAArrayAssignmentAssignment(AArrayAssignmentAssignment node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayAssignmentAssignment(AArrayAssignmentAssignment node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayAssignmentAssignment(AArrayAssignmentAssignment node)
    {
        InAArrayAssignmentAssignment(node);
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetLSqBracket() != null)
        {
            node.GetLSqBracket().Apply(this);
        }
        if(node.GetArrayPlace() != null)
        {
            node.GetArrayPlace().Apply(this);
        }
        if(node.GetRSqBracket() != null)
        {
            node.GetRSqBracket().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetValue() != null)
        {
            node.GetValue().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutAArrayAssignmentAssignment(node);
    }
    public virtual void InAIfBaseIfStatement(AIfBaseIfStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfBaseIfStatement(AIfBaseIfStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfBaseIfStatement(AIfBaseIfStatement node)
    {
        InAIfBaseIfStatement(node);
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        if(node.GetLParenthesis() != null)
        {
            node.GetLParenthesis().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetRParenthesis() != null)
        {
            node.GetRParenthesis().Apply(this);
        }
        if(node.GetLCuBracket() != null)
        {
            node.GetLCuBracket().Apply(this);
        }
        if(node.GetBodyLesser() != null)
        {
            node.GetBodyLesser().Apply(this);
        }
        if(node.GetRCuBracket() != null)
        {
            node.GetRCuBracket().Apply(this);
        }
        OutAIfBaseIfStatement(node);
    }
    public virtual void InAWhileBaseWhileStatement(AWhileBaseWhileStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileBaseWhileStatement(AWhileBaseWhileStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileBaseWhileStatement(AWhileBaseWhileStatement node)
    {
        InAWhileBaseWhileStatement(node);
        if(node.GetWhile() != null)
        {
            node.GetWhile().Apply(this);
        }
        if(node.GetLParenthesis() != null)
        {
            node.GetLParenthesis().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetRParenthesis() != null)
        {
            node.GetRParenthesis().Apply(this);
        }
        if(node.GetLCuBracket() != null)
        {
            node.GetLCuBracket().Apply(this);
        }
        if(node.GetBodyLesser() != null)
        {
            node.GetBodyLesser().Apply(this);
        }
        if(node.GetRCuBracket() != null)
        {
            node.GetRCuBracket().Apply(this);
        }
        OutAWhileBaseWhileStatement(node);
    }
    public virtual void InAProcedureCall(AProcedureCall node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProcedureCall(AProcedureCall node)
    {
        DefaultOut(node);
    }

    public override void CaseAProcedureCall(AProcedureCall node)
    {
        InAProcedureCall(node);
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetLParenthesis() != null)
        {
            node.GetLParenthesis().Apply(this);
        }
        if(node.GetProcedureHelper() != null)
        {
            node.GetProcedureHelper().Apply(this);
        }
        if(node.GetRParenthesis() != null)
        {
            node.GetRParenthesis().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutAProcedureCall(node);
    }
    public virtual void InAProcedureDeclaration(AProcedureDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProcedureDeclaration(AProcedureDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseAProcedureDeclaration(AProcedureDeclaration node)
    {
        InAProcedureDeclaration(node);
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetLParenthesis() != null)
        {
            node.GetLParenthesis().Apply(this);
        }
        if(node.GetProcedureHelper() != null)
        {
            node.GetProcedureHelper().Apply(this);
        }
        if(node.GetRParenthesis() != null)
        {
            node.GetRParenthesis().Apply(this);
        }
        if(node.GetLCuBracket() != null)
        {
            node.GetLCuBracket().Apply(this);
        }
        if(node.GetBodyLesser() != null)
        {
            node.GetBodyLesser().Apply(this);
        }
        if(node.GetRCuBracket() != null)
        {
            node.GetRCuBracket().Apply(this);
        }
        OutAProcedureDeclaration(node);
    }
    public virtual void InAProcedureHelperMainProcedureHelper(AProcedureHelperMainProcedureHelper node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProcedureHelperMainProcedureHelper(AProcedureHelperMainProcedureHelper node)
    {
        DefaultOut(node);
    }

    public override void CaseAProcedureHelperMainProcedureHelper(AProcedureHelperMainProcedureHelper node)
    {
        InAProcedureHelperMainProcedureHelper(node);
        if(node.GetProcedureHelper() != null)
        {
            node.GetProcedureHelper().Apply(this);
        }
        if(node.GetDatatype() != null)
        {
            node.GetDatatype().Apply(this);
        }
        if(node.GetSeperator() != null)
        {
            node.GetSeperator().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        OutAProcedureHelperMainProcedureHelper(node);
    }
    public virtual void InAProcedureHelperEmptyProcedureHelper(AProcedureHelperEmptyProcedureHelper node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProcedureHelperEmptyProcedureHelper(AProcedureHelperEmptyProcedureHelper node)
    {
        DefaultOut(node);
    }

    public override void CaseAProcedureHelperEmptyProcedureHelper(AProcedureHelperEmptyProcedureHelper node)
    {
        InAProcedureHelperEmptyProcedureHelper(node);
        OutAProcedureHelperEmptyProcedureHelper(node);
    }
    public virtual void InAExpressionMain(AExpressionMain node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExpressionMain(AExpressionMain node)
    {
        DefaultOut(node);
    }

    public override void CaseAExpressionMain(AExpressionMain node)
    {
        InAExpressionMain(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutAExpressionMain(node);
    }
    public virtual void InAAndBaseExpression(AAndBaseExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndBaseExpression(AAndBaseExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndBaseExpression(AAndBaseExpression node)
    {
        InAAndBaseExpression(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetAndSign() != null)
        {
            node.GetAndSign().Apply(this);
        }
        if(node.GetExpression1() != null)
        {
            node.GetExpression1().Apply(this);
        }
        OutAAndBaseExpression(node);
    }
    public virtual void InAOrBaseExpression(AOrBaseExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOrBaseExpression(AOrBaseExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAOrBaseExpression(AOrBaseExpression node)
    {
        InAOrBaseExpression(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetOrSign() != null)
        {
            node.GetOrSign().Apply(this);
        }
        if(node.GetExpression1() != null)
        {
            node.GetExpression1().Apply(this);
        }
        OutAOrBaseExpression(node);
    }
    public virtual void InANotBaseExpression(ANotBaseExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotBaseExpression(ANotBaseExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseANotBaseExpression(ANotBaseExpression node)
    {
        InANotBaseExpression(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetNotSign() != null)
        {
            node.GetNotSign().Apply(this);
        }
        if(node.GetExpression1() != null)
        {
            node.GetExpression1().Apply(this);
        }
        OutANotBaseExpression(node);
    }
    public virtual void InAAndNextExpression(AAndNextExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndNextExpression(AAndNextExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndNextExpression(AAndNextExpression node)
    {
        InAAndNextExpression(node);
        if(node.GetExpression1() != null)
        {
            node.GetExpression1().Apply(this);
        }
        OutAAndNextExpression(node);
    }
    public virtual void InAGreaterThanBaseExpression1(AGreaterThanBaseExpression1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterThanBaseExpression1(AGreaterThanBaseExpression1 node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterThanBaseExpression1(AGreaterThanBaseExpression1 node)
    {
        InAGreaterThanBaseExpression1(node);
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        if(node.GetGreater() != null)
        {
            node.GetGreater().Apply(this);
        }
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        OutAGreaterThanBaseExpression1(node);
    }
    public virtual void InALessThanBaseExpression1(ALessThanBaseExpression1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessThanBaseExpression1(ALessThanBaseExpression1 node)
    {
        DefaultOut(node);
    }

    public override void CaseALessThanBaseExpression1(ALessThanBaseExpression1 node)
    {
        InALessThanBaseExpression1(node);
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        if(node.GetLess() != null)
        {
            node.GetLess().Apply(this);
        }
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        OutALessThanBaseExpression1(node);
    }
    public virtual void InALessThanOrEqualBaseExpression1(ALessThanOrEqualBaseExpression1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessThanOrEqualBaseExpression1(ALessThanOrEqualBaseExpression1 node)
    {
        DefaultOut(node);
    }

    public override void CaseALessThanOrEqualBaseExpression1(ALessThanOrEqualBaseExpression1 node)
    {
        InALessThanOrEqualBaseExpression1(node);
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        if(node.GetLesserOrEqual() != null)
        {
            node.GetLesserOrEqual().Apply(this);
        }
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        OutALessThanOrEqualBaseExpression1(node);
    }
    public virtual void InAGreaterThanOrEqualBaseExpression1(AGreaterThanOrEqualBaseExpression1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterThanOrEqualBaseExpression1(AGreaterThanOrEqualBaseExpression1 node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterThanOrEqualBaseExpression1(AGreaterThanOrEqualBaseExpression1 node)
    {
        InAGreaterThanOrEqualBaseExpression1(node);
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        if(node.GetGreaterOrEqual() != null)
        {
            node.GetGreaterOrEqual().Apply(this);
        }
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        OutAGreaterThanOrEqualBaseExpression1(node);
    }
    public virtual void InAEquivalentBaseExpression1(AEquivalentBaseExpression1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEquivalentBaseExpression1(AEquivalentBaseExpression1 node)
    {
        DefaultOut(node);
    }

    public override void CaseAEquivalentBaseExpression1(AEquivalentBaseExpression1 node)
    {
        InAEquivalentBaseExpression1(node);
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        if(node.GetEquivalent() != null)
        {
            node.GetEquivalent().Apply(this);
        }
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        OutAEquivalentBaseExpression1(node);
    }
    public virtual void InAComparisonNextExpression1(AComparisonNextExpression1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAComparisonNextExpression1(AComparisonNextExpression1 node)
    {
        DefaultOut(node);
    }

    public override void CaseAComparisonNextExpression1(AComparisonNextExpression1 node)
    {
        InAComparisonNextExpression1(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutAComparisonNextExpression1(node);
    }
    public virtual void InAAdditionBaseExpression2(AAdditionBaseExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAdditionBaseExpression2(AAdditionBaseExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAAdditionBaseExpression2(AAdditionBaseExpression2 node)
    {
        InAAdditionBaseExpression2(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        if(node.GetAddition() != null)
        {
            node.GetAddition().Apply(this);
        }
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutAAdditionBaseExpression2(node);
    }
    public virtual void InASubtractionBaseExpression2(ASubtractionBaseExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASubtractionBaseExpression2(ASubtractionBaseExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseASubtractionBaseExpression2(ASubtractionBaseExpression2 node)
    {
        InASubtractionBaseExpression2(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        if(node.GetSubtraction() != null)
        {
            node.GetSubtraction().Apply(this);
        }
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutASubtractionBaseExpression2(node);
    }
    public virtual void InAArithmaticNextExpression2(AArithmaticNextExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArithmaticNextExpression2(AArithmaticNextExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAArithmaticNextExpression2(AArithmaticNextExpression2 node)
    {
        InAArithmaticNextExpression2(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutAArithmaticNextExpression2(node);
    }
    public virtual void InAMultiplicationBaseExpression3(AMultiplicationBaseExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultiplicationBaseExpression3(AMultiplicationBaseExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultiplicationBaseExpression3(AMultiplicationBaseExpression3 node)
    {
        InAMultiplicationBaseExpression3(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        if(node.GetMultiplication() != null)
        {
            node.GetMultiplication().Apply(this);
        }
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutAMultiplicationBaseExpression3(node);
    }
    public virtual void InADivisionBaseExpression3(ADivisionBaseExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivisionBaseExpression3(ADivisionBaseExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseADivisionBaseExpression3(ADivisionBaseExpression3 node)
    {
        InADivisionBaseExpression3(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        if(node.GetDivision() != null)
        {
            node.GetDivision().Apply(this);
        }
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutADivisionBaseExpression3(node);
    }
    public virtual void InAAlgebraNextExpression3(AAlgebraNextExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAlgebraNextExpression3(AAlgebraNextExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAAlgebraNextExpression3(AAlgebraNextExpression3 node)
    {
        InAAlgebraNextExpression3(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutAAlgebraNextExpression3(node);
    }
    public virtual void InAExponentBaseExpression4(AExponentBaseExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExponentBaseExpression4(AExponentBaseExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAExponentBaseExpression4(AExponentBaseExpression4 node)
    {
        InAExponentBaseExpression4(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        if(node.GetExponent() != null)
        {
            node.GetExponent().Apply(this);
        }
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        OutAExponentBaseExpression4(node);
    }
    public virtual void InAExponenetNextExpression4(AExponenetNextExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExponenetNextExpression4(AExponenetNextExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAExponenetNextExpression4(AExponenetNextExpression4 node)
    {
        InAExponenetNextExpression4(node);
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        OutAExponenetNextExpression4(node);
    }
    public virtual void InAParenthesisBaseExpression5(AParenthesisBaseExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParenthesisBaseExpression5(AParenthesisBaseExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseAParenthesisBaseExpression5(AParenthesisBaseExpression5 node)
    {
        InAParenthesisBaseExpression5(node);
        if(node.GetLParenthesis() != null)
        {
            node.GetLParenthesis().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetRParenthesis() != null)
        {
            node.GetRParenthesis().Apply(this);
        }
        OutAParenthesisBaseExpression5(node);
    }
    public virtual void InAArrayBaseExpression5(AArrayBaseExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayBaseExpression5(AArrayBaseExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayBaseExpression5(AArrayBaseExpression5 node)
    {
        InAArrayBaseExpression5(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetLSqBracket() != null)
        {
            node.GetLSqBracket().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetRSqBracket() != null)
        {
            node.GetRSqBracket().Apply(this);
        }
        OutAArrayBaseExpression5(node);
    }
    public virtual void InARecursiveExpressionVariableExpression5(ARecursiveExpressionVariableExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutARecursiveExpressionVariableExpression5(ARecursiveExpressionVariableExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseARecursiveExpressionVariableExpression5(ARecursiveExpressionVariableExpression5 node)
    {
        InARecursiveExpressionVariableExpression5(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutARecursiveExpressionVariableExpression5(node);
    }
    public virtual void InARecursiveExpressionIntExpression5(ARecursiveExpressionIntExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutARecursiveExpressionIntExpression5(ARecursiveExpressionIntExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseARecursiveExpressionIntExpression5(ARecursiveExpressionIntExpression5 node)
    {
        InARecursiveExpressionIntExpression5(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutARecursiveExpressionIntExpression5(node);
    }
    public virtual void InARecursiveExpressionFloatExpression5(ARecursiveExpressionFloatExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutARecursiveExpressionFloatExpression5(ARecursiveExpressionFloatExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseARecursiveExpressionFloatExpression5(ARecursiveExpressionFloatExpression5 node)
    {
        InARecursiveExpressionFloatExpression5(node);
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        OutARecursiveExpressionFloatExpression5(node);
    }
    public virtual void InARecursiveExpressionStringExpression5(ARecursiveExpressionStringExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutARecursiveExpressionStringExpression5(ARecursiveExpressionStringExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseARecursiveExpressionStringExpression5(ARecursiveExpressionStringExpression5 node)
    {
        InARecursiveExpressionStringExpression5(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutARecursiveExpressionStringExpression5(node);
    }
}


public class ReversedDepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetEOF().Apply(this);
        node.GetPProgram().Apply(this);
        OutStart(node);
    }

    public virtual void InAProgram(AProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgram(AProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgram(AProgram node)
    {
        InAProgram(node);
        if(node.GetRCuBracket() != null)
        {
            node.GetRCuBracket().Apply(this);
        }
        if(node.GetBody() != null)
        {
            node.GetBody().Apply(this);
        }
        if(node.GetLCuBracket() != null)
        {
            node.GetLCuBracket().Apply(this);
        }
        if(node.GetRParenthesis() != null)
        {
            node.GetRParenthesis().Apply(this);
        }
        if(node.GetLParenthesis() != null)
        {
            node.GetLParenthesis().Apply(this);
        }
        if(node.GetMainProgram() != null)
        {
            node.GetMainProgram().Apply(this);
        }
        OutAProgram(node);
    }
    public virtual void InAConstantSideBody(AConstantSideBody node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstantSideBody(AConstantSideBody node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstantSideBody(AConstantSideBody node)
    {
        InAConstantSideBody(node);
        if(node.GetBody() != null)
        {
            node.GetBody().Apply(this);
        }
        if(node.GetConstant() != null)
        {
            node.GetConstant().Apply(this);
        }
        OutAConstantSideBody(node);
    }
    public virtual void InAIfSideBody(AIfSideBody node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfSideBody(AIfSideBody node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfSideBody(AIfSideBody node)
    {
        InAIfSideBody(node);
        if(node.GetBody() != null)
        {
            node.GetBody().Apply(this);
        }
        if(node.GetIfStatement() != null)
        {
            node.GetIfStatement().Apply(this);
        }
        OutAIfSideBody(node);
    }
    public virtual void InAWhileSideBody(AWhileSideBody node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileSideBody(AWhileSideBody node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileSideBody(AWhileSideBody node)
    {
        InAWhileSideBody(node);
        if(node.GetBody() != null)
        {
            node.GetBody().Apply(this);
        }
        if(node.GetWhileStatement() != null)
        {
            node.GetWhileStatement().Apply(this);
        }
        OutAWhileSideBody(node);
    }
    public virtual void InAExpressionSideBody(AExpressionSideBody node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExpressionSideBody(AExpressionSideBody node)
    {
        DefaultOut(node);
    }

    public override void CaseAExpressionSideBody(AExpressionSideBody node)
    {
        InAExpressionSideBody(node);
        if(node.GetBody() != null)
        {
            node.GetBody().Apply(this);
        }
        if(node.GetExpressionMain() != null)
        {
            node.GetExpressionMain().Apply(this);
        }
        OutAExpressionSideBody(node);
    }
    public virtual void InAVariableSideBody(AVariableSideBody node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableSideBody(AVariableSideBody node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableSideBody(AVariableSideBody node)
    {
        InAVariableSideBody(node);
        if(node.GetBody() != null)
        {
            node.GetBody().Apply(this);
        }
        if(node.GetVariableDeclaration() != null)
        {
            node.GetVariableDeclaration().Apply(this);
        }
        OutAVariableSideBody(node);
    }
    public virtual void InAProcedureCallSideBody(AProcedureCallSideBody node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProcedureCallSideBody(AProcedureCallSideBody node)
    {
        DefaultOut(node);
    }

    public override void CaseAProcedureCallSideBody(AProcedureCallSideBody node)
    {
        InAProcedureCallSideBody(node);
        if(node.GetBody() != null)
        {
            node.GetBody().Apply(this);
        }
        if(node.GetProcedureCall() != null)
        {
            node.GetProcedureCall().Apply(this);
        }
        OutAProcedureCallSideBody(node);
    }
    public virtual void InAProcedureSideBody(AProcedureSideBody node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProcedureSideBody(AProcedureSideBody node)
    {
        DefaultOut(node);
    }

    public override void CaseAProcedureSideBody(AProcedureSideBody node)
    {
        InAProcedureSideBody(node);
        if(node.GetBody() != null)
        {
            node.GetBody().Apply(this);
        }
        if(node.GetProcedureDeclaration() != null)
        {
            node.GetProcedureDeclaration().Apply(this);
        }
        OutAProcedureSideBody(node);
    }
    public virtual void InAAssignmentSideBody(AAssignmentSideBody node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignmentSideBody(AAssignmentSideBody node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignmentSideBody(AAssignmentSideBody node)
    {
        InAAssignmentSideBody(node);
        if(node.GetBody() != null)
        {
            node.GetBody().Apply(this);
        }
        if(node.GetAssignment() != null)
        {
            node.GetAssignment().Apply(this);
        }
        OutAAssignmentSideBody(node);
    }
    public virtual void InAEmptyBodyBody(AEmptyBodyBody node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEmptyBodyBody(AEmptyBodyBody node)
    {
        DefaultOut(node);
    }

    public override void CaseAEmptyBodyBody(AEmptyBodyBody node)
    {
        InAEmptyBodyBody(node);
        OutAEmptyBodyBody(node);
    }
    public virtual void InAIfSideBodyLesser(AIfSideBodyLesser node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfSideBodyLesser(AIfSideBodyLesser node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfSideBodyLesser(AIfSideBodyLesser node)
    {
        InAIfSideBodyLesser(node);
        if(node.GetBodyLesser() != null)
        {
            node.GetBodyLesser().Apply(this);
        }
        if(node.GetIfStatement() != null)
        {
            node.GetIfStatement().Apply(this);
        }
        OutAIfSideBodyLesser(node);
    }
    public virtual void InAWhileSideBodyLesser(AWhileSideBodyLesser node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileSideBodyLesser(AWhileSideBodyLesser node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileSideBodyLesser(AWhileSideBodyLesser node)
    {
        InAWhileSideBodyLesser(node);
        if(node.GetBodyLesser() != null)
        {
            node.GetBodyLesser().Apply(this);
        }
        if(node.GetWhileStatement() != null)
        {
            node.GetWhileStatement().Apply(this);
        }
        OutAWhileSideBodyLesser(node);
    }
    public virtual void InAExpressionSideBodyLesser(AExpressionSideBodyLesser node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExpressionSideBodyLesser(AExpressionSideBodyLesser node)
    {
        DefaultOut(node);
    }

    public override void CaseAExpressionSideBodyLesser(AExpressionSideBodyLesser node)
    {
        InAExpressionSideBodyLesser(node);
        if(node.GetBodyLesser() != null)
        {
            node.GetBodyLesser().Apply(this);
        }
        if(node.GetExpressionMain() != null)
        {
            node.GetExpressionMain().Apply(this);
        }
        OutAExpressionSideBodyLesser(node);
    }
    public virtual void InAProcedureCallSideBodyLesser(AProcedureCallSideBodyLesser node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProcedureCallSideBodyLesser(AProcedureCallSideBodyLesser node)
    {
        DefaultOut(node);
    }

    public override void CaseAProcedureCallSideBodyLesser(AProcedureCallSideBodyLesser node)
    {
        InAProcedureCallSideBodyLesser(node);
        if(node.GetBodyLesser() != null)
        {
            node.GetBodyLesser().Apply(this);
        }
        if(node.GetProcedureCall() != null)
        {
            node.GetProcedureCall().Apply(this);
        }
        OutAProcedureCallSideBodyLesser(node);
    }
    public virtual void InAAssignmentSideBodyLesser(AAssignmentSideBodyLesser node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignmentSideBodyLesser(AAssignmentSideBodyLesser node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignmentSideBodyLesser(AAssignmentSideBodyLesser node)
    {
        InAAssignmentSideBodyLesser(node);
        if(node.GetBody() != null)
        {
            node.GetBody().Apply(this);
        }
        if(node.GetAssignment() != null)
        {
            node.GetAssignment().Apply(this);
        }
        OutAAssignmentSideBodyLesser(node);
    }
    public virtual void InAEmptyBodyBodyLesser(AEmptyBodyBodyLesser node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEmptyBodyBodyLesser(AEmptyBodyBodyLesser node)
    {
        DefaultOut(node);
    }

    public override void CaseAEmptyBodyBodyLesser(AEmptyBodyBodyLesser node)
    {
        InAEmptyBodyBodyLesser(node);
        OutAEmptyBodyBodyLesser(node);
    }
    public virtual void InAConstantBaseConstant(AConstantBaseConstant node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstantBaseConstant(AConstantBaseConstant node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstantBaseConstant(AConstantBaseConstant node)
    {
        InAConstantBaseConstant(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetSeperator() != null)
        {
            node.GetSeperator().Apply(this);
        }
        if(node.GetDatatype() != null)
        {
            node.GetDatatype().Apply(this);
        }
        if(node.GetConstToken() != null)
        {
            node.GetConstToken().Apply(this);
        }
        OutAConstantBaseConstant(node);
    }
    public virtual void InAVarBaseVariableDeclaration(AVarBaseVariableDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVarBaseVariableDeclaration(AVarBaseVariableDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseAVarBaseVariableDeclaration(AVarBaseVariableDeclaration node)
    {
        InAVarBaseVariableDeclaration(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetSeperator() != null)
        {
            node.GetSeperator().Apply(this);
        }
        if(node.GetDatatype() != null)
        {
            node.GetDatatype().Apply(this);
        }
        OutAVarBaseVariableDeclaration(node);
    }
    public virtual void InAArrayDeclarationBaseVariableDeclaration(AArrayDeclarationBaseVariableDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayDeclarationBaseVariableDeclaration(AArrayDeclarationBaseVariableDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayDeclarationBaseVariableDeclaration(AArrayDeclarationBaseVariableDeclaration node)
    {
        InAArrayDeclarationBaseVariableDeclaration(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetRSqBracket() != null)
        {
            node.GetRSqBracket().Apply(this);
        }
        if(node.GetLSqBracket() != null)
        {
            node.GetLSqBracket().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetSeperator() != null)
        {
            node.GetSeperator().Apply(this);
        }
        if(node.GetDatatype() != null)
        {
            node.GetDatatype().Apply(this);
        }
        OutAArrayDeclarationBaseVariableDeclaration(node);
    }
    public virtual void InAStandardAssignmentAssignment(AStandardAssignmentAssignment node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStandardAssignmentAssignment(AStandardAssignmentAssignment node)
    {
        DefaultOut(node);
    }

    public override void CaseAStandardAssignmentAssignment(AStandardAssignmentAssignment node)
    {
        InAStandardAssignmentAssignment(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        OutAStandardAssignmentAssignment(node);
    }
    public virtual void InAArrayAssignmentAssignment(AArrayAssignmentAssignment node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayAssignmentAssignment(AArrayAssignmentAssignment node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayAssignmentAssignment(AArrayAssignmentAssignment node)
    {
        InAArrayAssignmentAssignment(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetValue() != null)
        {
            node.GetValue().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetRSqBracket() != null)
        {
            node.GetRSqBracket().Apply(this);
        }
        if(node.GetArrayPlace() != null)
        {
            node.GetArrayPlace().Apply(this);
        }
        if(node.GetLSqBracket() != null)
        {
            node.GetLSqBracket().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        OutAArrayAssignmentAssignment(node);
    }
    public virtual void InAIfBaseIfStatement(AIfBaseIfStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfBaseIfStatement(AIfBaseIfStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfBaseIfStatement(AIfBaseIfStatement node)
    {
        InAIfBaseIfStatement(node);
        if(node.GetRCuBracket() != null)
        {
            node.GetRCuBracket().Apply(this);
        }
        if(node.GetBodyLesser() != null)
        {
            node.GetBodyLesser().Apply(this);
        }
        if(node.GetLCuBracket() != null)
        {
            node.GetLCuBracket().Apply(this);
        }
        if(node.GetRParenthesis() != null)
        {
            node.GetRParenthesis().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetLParenthesis() != null)
        {
            node.GetLParenthesis().Apply(this);
        }
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        OutAIfBaseIfStatement(node);
    }
    public virtual void InAWhileBaseWhileStatement(AWhileBaseWhileStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileBaseWhileStatement(AWhileBaseWhileStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileBaseWhileStatement(AWhileBaseWhileStatement node)
    {
        InAWhileBaseWhileStatement(node);
        if(node.GetRCuBracket() != null)
        {
            node.GetRCuBracket().Apply(this);
        }
        if(node.GetBodyLesser() != null)
        {
            node.GetBodyLesser().Apply(this);
        }
        if(node.GetLCuBracket() != null)
        {
            node.GetLCuBracket().Apply(this);
        }
        if(node.GetRParenthesis() != null)
        {
            node.GetRParenthesis().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetLParenthesis() != null)
        {
            node.GetLParenthesis().Apply(this);
        }
        if(node.GetWhile() != null)
        {
            node.GetWhile().Apply(this);
        }
        OutAWhileBaseWhileStatement(node);
    }
    public virtual void InAProcedureCall(AProcedureCall node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProcedureCall(AProcedureCall node)
    {
        DefaultOut(node);
    }

    public override void CaseAProcedureCall(AProcedureCall node)
    {
        InAProcedureCall(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetRParenthesis() != null)
        {
            node.GetRParenthesis().Apply(this);
        }
        if(node.GetProcedureHelper() != null)
        {
            node.GetProcedureHelper().Apply(this);
        }
        if(node.GetLParenthesis() != null)
        {
            node.GetLParenthesis().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        OutAProcedureCall(node);
    }
    public virtual void InAProcedureDeclaration(AProcedureDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProcedureDeclaration(AProcedureDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseAProcedureDeclaration(AProcedureDeclaration node)
    {
        InAProcedureDeclaration(node);
        if(node.GetRCuBracket() != null)
        {
            node.GetRCuBracket().Apply(this);
        }
        if(node.GetBodyLesser() != null)
        {
            node.GetBodyLesser().Apply(this);
        }
        if(node.GetLCuBracket() != null)
        {
            node.GetLCuBracket().Apply(this);
        }
        if(node.GetRParenthesis() != null)
        {
            node.GetRParenthesis().Apply(this);
        }
        if(node.GetProcedureHelper() != null)
        {
            node.GetProcedureHelper().Apply(this);
        }
        if(node.GetLParenthesis() != null)
        {
            node.GetLParenthesis().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        OutAProcedureDeclaration(node);
    }
    public virtual void InAProcedureHelperMainProcedureHelper(AProcedureHelperMainProcedureHelper node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProcedureHelperMainProcedureHelper(AProcedureHelperMainProcedureHelper node)
    {
        DefaultOut(node);
    }

    public override void CaseAProcedureHelperMainProcedureHelper(AProcedureHelperMainProcedureHelper node)
    {
        InAProcedureHelperMainProcedureHelper(node);
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetSeperator() != null)
        {
            node.GetSeperator().Apply(this);
        }
        if(node.GetDatatype() != null)
        {
            node.GetDatatype().Apply(this);
        }
        if(node.GetProcedureHelper() != null)
        {
            node.GetProcedureHelper().Apply(this);
        }
        OutAProcedureHelperMainProcedureHelper(node);
    }
    public virtual void InAProcedureHelperEmptyProcedureHelper(AProcedureHelperEmptyProcedureHelper node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProcedureHelperEmptyProcedureHelper(AProcedureHelperEmptyProcedureHelper node)
    {
        DefaultOut(node);
    }

    public override void CaseAProcedureHelperEmptyProcedureHelper(AProcedureHelperEmptyProcedureHelper node)
    {
        InAProcedureHelperEmptyProcedureHelper(node);
        OutAProcedureHelperEmptyProcedureHelper(node);
    }
    public virtual void InAExpressionMain(AExpressionMain node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExpressionMain(AExpressionMain node)
    {
        DefaultOut(node);
    }

    public override void CaseAExpressionMain(AExpressionMain node)
    {
        InAExpressionMain(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutAExpressionMain(node);
    }
    public virtual void InAAndBaseExpression(AAndBaseExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndBaseExpression(AAndBaseExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndBaseExpression(AAndBaseExpression node)
    {
        InAAndBaseExpression(node);
        if(node.GetExpression1() != null)
        {
            node.GetExpression1().Apply(this);
        }
        if(node.GetAndSign() != null)
        {
            node.GetAndSign().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutAAndBaseExpression(node);
    }
    public virtual void InAOrBaseExpression(AOrBaseExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOrBaseExpression(AOrBaseExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAOrBaseExpression(AOrBaseExpression node)
    {
        InAOrBaseExpression(node);
        if(node.GetExpression1() != null)
        {
            node.GetExpression1().Apply(this);
        }
        if(node.GetOrSign() != null)
        {
            node.GetOrSign().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutAOrBaseExpression(node);
    }
    public virtual void InANotBaseExpression(ANotBaseExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotBaseExpression(ANotBaseExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseANotBaseExpression(ANotBaseExpression node)
    {
        InANotBaseExpression(node);
        if(node.GetExpression1() != null)
        {
            node.GetExpression1().Apply(this);
        }
        if(node.GetNotSign() != null)
        {
            node.GetNotSign().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutANotBaseExpression(node);
    }
    public virtual void InAAndNextExpression(AAndNextExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndNextExpression(AAndNextExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndNextExpression(AAndNextExpression node)
    {
        InAAndNextExpression(node);
        if(node.GetExpression1() != null)
        {
            node.GetExpression1().Apply(this);
        }
        OutAAndNextExpression(node);
    }
    public virtual void InAGreaterThanBaseExpression1(AGreaterThanBaseExpression1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterThanBaseExpression1(AGreaterThanBaseExpression1 node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterThanBaseExpression1(AGreaterThanBaseExpression1 node)
    {
        InAGreaterThanBaseExpression1(node);
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        if(node.GetGreater() != null)
        {
            node.GetGreater().Apply(this);
        }
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        OutAGreaterThanBaseExpression1(node);
    }
    public virtual void InALessThanBaseExpression1(ALessThanBaseExpression1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessThanBaseExpression1(ALessThanBaseExpression1 node)
    {
        DefaultOut(node);
    }

    public override void CaseALessThanBaseExpression1(ALessThanBaseExpression1 node)
    {
        InALessThanBaseExpression1(node);
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        if(node.GetLess() != null)
        {
            node.GetLess().Apply(this);
        }
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        OutALessThanBaseExpression1(node);
    }
    public virtual void InALessThanOrEqualBaseExpression1(ALessThanOrEqualBaseExpression1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessThanOrEqualBaseExpression1(ALessThanOrEqualBaseExpression1 node)
    {
        DefaultOut(node);
    }

    public override void CaseALessThanOrEqualBaseExpression1(ALessThanOrEqualBaseExpression1 node)
    {
        InALessThanOrEqualBaseExpression1(node);
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        if(node.GetLesserOrEqual() != null)
        {
            node.GetLesserOrEqual().Apply(this);
        }
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        OutALessThanOrEqualBaseExpression1(node);
    }
    public virtual void InAGreaterThanOrEqualBaseExpression1(AGreaterThanOrEqualBaseExpression1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterThanOrEqualBaseExpression1(AGreaterThanOrEqualBaseExpression1 node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterThanOrEqualBaseExpression1(AGreaterThanOrEqualBaseExpression1 node)
    {
        InAGreaterThanOrEqualBaseExpression1(node);
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        if(node.GetGreaterOrEqual() != null)
        {
            node.GetGreaterOrEqual().Apply(this);
        }
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        OutAGreaterThanOrEqualBaseExpression1(node);
    }
    public virtual void InAEquivalentBaseExpression1(AEquivalentBaseExpression1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEquivalentBaseExpression1(AEquivalentBaseExpression1 node)
    {
        DefaultOut(node);
    }

    public override void CaseAEquivalentBaseExpression1(AEquivalentBaseExpression1 node)
    {
        InAEquivalentBaseExpression1(node);
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        if(node.GetEquivalent() != null)
        {
            node.GetEquivalent().Apply(this);
        }
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        OutAEquivalentBaseExpression1(node);
    }
    public virtual void InAComparisonNextExpression1(AComparisonNextExpression1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAComparisonNextExpression1(AComparisonNextExpression1 node)
    {
        DefaultOut(node);
    }

    public override void CaseAComparisonNextExpression1(AComparisonNextExpression1 node)
    {
        InAComparisonNextExpression1(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutAComparisonNextExpression1(node);
    }
    public virtual void InAAdditionBaseExpression2(AAdditionBaseExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAdditionBaseExpression2(AAdditionBaseExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAAdditionBaseExpression2(AAdditionBaseExpression2 node)
    {
        InAAdditionBaseExpression2(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        if(node.GetAddition() != null)
        {
            node.GetAddition().Apply(this);
        }
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutAAdditionBaseExpression2(node);
    }
    public virtual void InASubtractionBaseExpression2(ASubtractionBaseExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASubtractionBaseExpression2(ASubtractionBaseExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseASubtractionBaseExpression2(ASubtractionBaseExpression2 node)
    {
        InASubtractionBaseExpression2(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        if(node.GetSubtraction() != null)
        {
            node.GetSubtraction().Apply(this);
        }
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutASubtractionBaseExpression2(node);
    }
    public virtual void InAArithmaticNextExpression2(AArithmaticNextExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArithmaticNextExpression2(AArithmaticNextExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAArithmaticNextExpression2(AArithmaticNextExpression2 node)
    {
        InAArithmaticNextExpression2(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutAArithmaticNextExpression2(node);
    }
    public virtual void InAMultiplicationBaseExpression3(AMultiplicationBaseExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultiplicationBaseExpression3(AMultiplicationBaseExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultiplicationBaseExpression3(AMultiplicationBaseExpression3 node)
    {
        InAMultiplicationBaseExpression3(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        if(node.GetMultiplication() != null)
        {
            node.GetMultiplication().Apply(this);
        }
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutAMultiplicationBaseExpression3(node);
    }
    public virtual void InADivisionBaseExpression3(ADivisionBaseExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivisionBaseExpression3(ADivisionBaseExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseADivisionBaseExpression3(ADivisionBaseExpression3 node)
    {
        InADivisionBaseExpression3(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        if(node.GetDivision() != null)
        {
            node.GetDivision().Apply(this);
        }
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutADivisionBaseExpression3(node);
    }
    public virtual void InAAlgebraNextExpression3(AAlgebraNextExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAlgebraNextExpression3(AAlgebraNextExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAAlgebraNextExpression3(AAlgebraNextExpression3 node)
    {
        InAAlgebraNextExpression3(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutAAlgebraNextExpression3(node);
    }
    public virtual void InAExponentBaseExpression4(AExponentBaseExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExponentBaseExpression4(AExponentBaseExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAExponentBaseExpression4(AExponentBaseExpression4 node)
    {
        InAExponentBaseExpression4(node);
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        if(node.GetExponent() != null)
        {
            node.GetExponent().Apply(this);
        }
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutAExponentBaseExpression4(node);
    }
    public virtual void InAExponenetNextExpression4(AExponenetNextExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExponenetNextExpression4(AExponenetNextExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAExponenetNextExpression4(AExponenetNextExpression4 node)
    {
        InAExponenetNextExpression4(node);
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        OutAExponenetNextExpression4(node);
    }
    public virtual void InAParenthesisBaseExpression5(AParenthesisBaseExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParenthesisBaseExpression5(AParenthesisBaseExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseAParenthesisBaseExpression5(AParenthesisBaseExpression5 node)
    {
        InAParenthesisBaseExpression5(node);
        if(node.GetRParenthesis() != null)
        {
            node.GetRParenthesis().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetLParenthesis() != null)
        {
            node.GetLParenthesis().Apply(this);
        }
        OutAParenthesisBaseExpression5(node);
    }
    public virtual void InAArrayBaseExpression5(AArrayBaseExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayBaseExpression5(AArrayBaseExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayBaseExpression5(AArrayBaseExpression5 node)
    {
        InAArrayBaseExpression5(node);
        if(node.GetRSqBracket() != null)
        {
            node.GetRSqBracket().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetLSqBracket() != null)
        {
            node.GetLSqBracket().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAArrayBaseExpression5(node);
    }
    public virtual void InARecursiveExpressionVariableExpression5(ARecursiveExpressionVariableExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutARecursiveExpressionVariableExpression5(ARecursiveExpressionVariableExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseARecursiveExpressionVariableExpression5(ARecursiveExpressionVariableExpression5 node)
    {
        InARecursiveExpressionVariableExpression5(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutARecursiveExpressionVariableExpression5(node);
    }
    public virtual void InARecursiveExpressionIntExpression5(ARecursiveExpressionIntExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutARecursiveExpressionIntExpression5(ARecursiveExpressionIntExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseARecursiveExpressionIntExpression5(ARecursiveExpressionIntExpression5 node)
    {
        InARecursiveExpressionIntExpression5(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutARecursiveExpressionIntExpression5(node);
    }
    public virtual void InARecursiveExpressionFloatExpression5(ARecursiveExpressionFloatExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutARecursiveExpressionFloatExpression5(ARecursiveExpressionFloatExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseARecursiveExpressionFloatExpression5(ARecursiveExpressionFloatExpression5 node)
    {
        InARecursiveExpressionFloatExpression5(node);
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        OutARecursiveExpressionFloatExpression5(node);
    }
    public virtual void InARecursiveExpressionStringExpression5(ARecursiveExpressionStringExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutARecursiveExpressionStringExpression5(ARecursiveExpressionStringExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseARecursiveExpressionStringExpression5(ARecursiveExpressionStringExpression5 node)
    {
        InARecursiveExpressionStringExpression5(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutARecursiveExpressionStringExpression5(node);
    }
}
} // namespace comp5210.analysis
